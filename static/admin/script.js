document.addEventListener('DOMContentLoaded', () => {
  // Bi·∫øn to√†n c·ª•c
  let allPosts = [];
  let currentFolder = '';
  
  // 1. KH·ªûI T·∫†O NETLIFY IDENTITY
  if (window.netlifyIdentity) {
    netlifyIdentity.init({
      APIUrl: 'https://storeios.net/.netlify/identity' // Th√™m URL c·ª• th·ªÉ
    });

    // 2. X·ª¨ L√ù S·ª∞ KI·ªÜN ƒêƒÇNG NH·∫¨P
    const handleAuthChange = (user) => {
      const loginBtn = document.getElementById('login-btn');
      const dashboard = document.getElementById('dashboard');
      
      if (user) {
        console.log('ƒê√£ ƒëƒÉng nh·∫≠p:', user.email);
        loginBtn.textContent = `ƒêƒÉng xu·∫•t (${user.email})`;
        loginBtn.style.backgroundColor = '#f44336';
        dashboard.style.display = 'flex';
        loadFolderContents('content'); // T·∫£i th∆∞ m·ª•c g·ªëc
      } else {
        console.log('Ch∆∞a ƒëƒÉng nh·∫≠p');
        loginBtn.textContent = 'ƒêƒÉng nh·∫≠p';
        loginBtn.style.backgroundColor = '#4CAF50';
        dashboard.style.display = 'none';
        allPosts = []; // Reset danh s√°ch b√†i vi·∫øt
      }
    };

    netlifyIdentity.on('init', handleAuthChange);
    netlifyIdentity.on('login', (user) => {
      handleAuthChange(user);
      netlifyIdentity.close();
    });
    netlifyIdentity.on('logout', () => handleAuthChange(null));
    
    // Th√™m x·ª≠ l√Ω khi ƒë√≥ng modal ƒëƒÉng nh·∫≠p
    netlifyIdentity.on('close', () => {
      // Ki·ªÉm tra n·∫øu user v·∫´n null sau khi ƒë√≥ng modal
      if (!netlifyIdentity.currentUser()) {
        handleAuthChange(null);
      }
    });

    // 3. KI·ªÇM TRA TR·∫†NG TH√ÅI BAN ƒê·∫¶U
    handleAuthChange(netlifyIdentity.currentUser());
    
    // Th√™m s·ª± ki·ªán click cho n√∫t ƒëƒÉng nh·∫≠p
    document.getElementById('login-btn').addEventListener('click', () => {
      if (netlifyIdentity.currentUser()) {
        netlifyIdentity.logout();
      } else {
        netlifyIdentity.open('login');
      }
    });
  }

  // 4. T·∫¢I N·ªòI DUNG TH∆Ø M·ª§C
  async function loadFolderContents(path) {
    currentFolder = path;
    const postsList = document.getElementById('posts-list');
    const breadcrumb = document.getElementById('breadcrumb') || createBreadcrumb();
    
    postsList.innerHTML = '<div class="loading">ƒêang t·∫£i d·ªØ li·ªáu...</div>';
    updateBreadcrumb(path);

    try {
      // Ki·ªÉm tra ƒëƒÉng nh·∫≠p
      const user = netlifyIdentity.currentUser();
      if (!user) throw new Error('B·∫°n ch∆∞a ƒëƒÉng nh·∫≠p');

      // Ki·ªÉm tra token c·∫£i ti·∫øn
      if (!user.token || !user.token.access_token) {
        console.log('Token kh√¥ng h·ª£p l·ªá, y√™u c·∫ßu ƒëƒÉng nh·∫≠p l·∫°i');
        netlifyIdentity.logout();
        throw new Error('Phi√™n l√†m vi·ªác h·∫øt h·∫°n, vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i');
      }

      // G·ªçi API v·ªõi token
      const response = await fetch(`/.netlify/git/github/contents/${path}`, {
        headers: {
          'Authorization': `Bearer ${user.token.access_token}`,
          'Accept': 'application/vnd.github.v3+json'
        }
      });

      // X·ª≠ l√Ω response
      if (!response.ok) {
        const errorData = await response.json().catch(() => ({}));
        throw new Error(errorData.message || `L·ªói HTTP ${response.status}`);
      }

      const data = await response.json();
      console.log('D·ªØ li·ªáu nh·∫≠n ƒë∆∞·ª£c:', data);

      // L∆∞u d·ªØ li·ªáu v√†o bi·∫øn to√†n c·ª•c
      allPosts = Array.isArray(data) ? data : [data];
      
      // Hi·ªÉn th·ªã n·ªôi dung
      renderFolderContents(allPosts, path);

    } catch (error) {
      console.error('L·ªói t·∫£i d·ªØ li·ªáu:', error);
      postsList.innerHTML = `
        <div class="error">
          ‚ùå L·ªói: ${error.message || 'Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu'}
          ${error.message && error.message.includes('401') ? 
            '<p>Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i</p>' : 
            '<button onclick="loadFolderContents('${path}')">Th·ª≠ l·∫°i</button>'}
        </div>
      `;
    }
  }

  // 5. T·∫†O BREADCRUMB
  function createBreadcrumb() {
    const dashboard = document.getElementById('dashboard');
    const breadcrumb = document.createElement('div');
    breadcrumb.id = 'breadcrumb';
    breadcrumb.className = 'breadcrumb';
    dashboard.insertBefore(breadcrumb, dashboard.firstChild);
    return breadcrumb;
  }

  // 6. C·∫¨P NH·∫¨T BREADCRUMB
  function updateBreadcrumb(path) {
    const breadcrumb = document.getElementById('breadcrumb');
    const parts = path.split('/');
    
    let breadcrumbHTML = `<span class="crumb" onclick="loadFolderContents('content')">Home</span>`;
    let currentPath = 'content';
    
    for (let i = 1; i < parts.length; i++) {
      currentPath += '/' + parts[i];
      breadcrumbHTML += ` > <span class="crumb" onclick="loadFolderContents('${currentPath}')">${parts[i]}</span>`;
    }
    
    breadcrumb.innerHTML = breadcrumbHTML;
  }

  // 7. HI·ªÇN TH·ªä N·ªòI DUNG TH∆Ø M·ª§C
  function renderFolderContents(items, currentPath) {
    const postsList = document.getElementById('posts-list');
    
    if (!items || items.length === 0) {
      postsList.innerHTML = '<div class="empty">Kh√¥ng c√≥ n·ªôi dung</div>';
      return;
    }
    
    // S·∫Øp x·∫øp: th∆∞ m·ª•c tr∆∞·ªõc, file sau
    const sortedItems = [...items].sort((a, b) => {
      if (a.type === b.type) return a.name.localeCompare(b.name);
      return a.type === 'dir' ? -1 : 1;
    });
    
    postsList.innerHTML = `
      <div class="folder-header">
        <div class="folder-path">${currentPath}</div>
        <button id="add-post-btn" class="action-btn">Th√™m b√†i vi·∫øt</button>
        <button id="add-folder-btn" class="action-btn">Th√™m th∆∞ m·ª•c</button>
      </div>
      <div class="content-list">
        ${sortedItems.map(item => {
          if (item.type === 'dir') {
            return `
              <div class="folder-item">
                <div class="folder-name" onclick="loadFolderContents('${item.path}')">
                  üìÅ ${item.name}
                </div>
                <div class="folder-actions">
                  <button onclick="deleteItem('${item.path}', '${item.sha}', true)">X√≥a</button>
                </div>
              </div>
            `;
          } else {
            // Hi·ªÉn th·ªã file (ch·ªâ hi·ªÉn th·ªã file .md)
            if (!item.name.endsWith('.md')) return '';
            
            return `
              <div class="post-item">
                <span class="post-title">${item.name.replace('.md', '')}</span>
                <div class="post-actions">
                  <button onclick="editPost('${item.path}', '${item.sha}')">S·ª≠a</button>
                  <button onclick="deleteItem('${item.path}', '${item.sha}', false)">X√≥a</button>
                  <button onclick="viewPost('${item.path}')">Xem</button>
                </div>
              </div>
            `;
          }
        }).join('')}
      </div>
    `;
    
    // Th√™m s·ª± ki·ªán cho c√°c n√∫t
    document.getElementById('add-post-btn').addEventListener('click', () => addNewPost(currentPath));
    document.getElementById('add-folder-btn').addEventListener('click', () => addNewFolder(currentPath));
  }

  // 8. X·ª¨ L√ù N√öT NEW POST
  document.getElementById('create-post').addEventListener('click', () => {
    if (!netlifyIdentity.currentUser()) {
      alert('Vui l√≤ng ƒëƒÉng nh·∫≠p tr∆∞·ªõc');
      return;
    }
    addNewPost(currentFolder);
  });

  // ƒêƒÉng k√Ω h√†m to√†n c·ª•c
  window.loadFolderContents = loadFolderContents;
});

// 9. CH·ª®C NƒÇNG XEM B√ÄI VI·∫æT
function viewPost(path) {
  console.log('Xem b√†i vi·∫øt:', path);
  
  // T√¨m URL th·ª±c t·∫ø c·ªßa b√†i vi·∫øt b·∫±ng c√°ch chuy·ªÉn ƒë·ªïi ƒë∆∞·ªùng d·∫´n
  const slug = path.replace('content/', '').replace('.md', '');
  const baseUrl = window.location.origin;
  const postUrl = `${baseUrl}/${slug}`;
  
  // M·ªü b√†i vi·∫øt trong tab m·ªõi
  window.open(postUrl, '_blank');
}

// 10. CH·ª®C NƒÇNG S·ª¨A B√ÄI VI·∫æT
async function editPost(path, sha) {
  console.log('B·∫Øt ƒë·∫ßu s·ª≠a:', path, 'SHA:', sha);
  
  // Ki·ªÉm tra ƒëƒÉng nh·∫≠p
  if (!window.netlifyIdentity.currentUser()) {
    alert('Vui l√≤ng ƒëƒÉng nh·∫≠p ƒë·ªÉ s·ª≠a b√†i vi·∫øt');
    return;
  }
  
  try {
    const user = window.netlifyIdentity.currentUser();
    if (!user || !user.token || !user.token.access_token) {
      throw new Error('B·∫°n c·∫ßn ƒëƒÉng nh·∫≠p l·∫°i');
    }
    
    // T·∫£i n·ªôi dung b√†i vi·∫øt
    const response = await fetch(`/.netlify/git/github/contents/${path}`, {
      headers: {
        'Authorization': `Bearer ${user.token.access_token}`,
        'Accept': 'application/vnd.github.v3+json'
      }
    });
    
    if (!response.ok) {
      throw new Error(`Kh√¥ng th·ªÉ t·∫£i n·ªôi dung: ${response.status}`);
    }
    
    const fileData = await response.json();
    
    // Gi·∫£i m√£ n·ªôi dung Base64
    const content = atob(fileData.content);
    
    // Hi·ªÉn th·ªã modal ch·ªânh s·ª≠a
    showEditModal(path, content, sha);
    
  } catch (error) {
    console.error('L·ªói khi t·∫£i n·ªôi dung b√†i vi·∫øt:', error);
    alert(`L·ªói: ${error.message || 'Kh√¥ng th·ªÉ t·∫£i n·ªôi dung b√†i vi·∫øt'}`);
  }
}

// 11. HI·ªÇN TH·ªä MODAL CH·ªàNH S·ª¨A
function showEditModal(path, content, sha) {
  // T·∫°o modal n·∫øu ch∆∞a t·ªìn t·∫°i
  let modal = document.getElementById('edit-modal');
  if (!modal) {
    modal = document.createElement('div');
    modal.id = 'edit-modal';
    modal.className = 'modal';
    
    document.body.appendChild(modal);
  }
  
  // T√≠nh to√°n t√™n b√†i vi·∫øt v√† ƒë∆∞·ªùng d·∫´n th∆∞ m·ª•c
  const filename = path.split('/').pop();
  const folderPath = path.substring(0, path.lastIndexOf('/'));
  
  // C·∫≠p nh·∫≠t n·ªôi dung modal
  modal.innerHTML = `
    <div class="modal-content">
      <div class="modal-header">
        <h2>Ch·ªânh s·ª≠a b√†i vi·∫øt</h2>
        <span class="close-btn" onclick="document.getElementById('edit-modal').style.display='none'">&times;</span>
      </div>
      <div class="modal-body">
        <div class="form-group">
          <label for="edit-title">Ti√™u ƒë·ªÅ:</label>
          <input type="text" id="edit-title" value="${filename.replace('.md', '')}" />
        </div>
        <div class="form-group">
          <label for="edit-content">N·ªôi dung:</label>
          <textarea id="edit-content" rows="20">${content}</textarea>
        </div>
      </div>
      <div class="modal-footer">
        <button onclick="savePost('${path}', '${sha}')">L∆∞u</button>
        <button onclick="document.getElementById('edit-modal').style.display='none'">H·ªßy</button>
      </div>
    </div>
  `;
  
  // Hi·ªÉn th·ªã modal
  modal.style.display = 'block';
  
  // Th√™m CSS cho modal n·∫øu ch∆∞a c√≥
  if (!document.getElementById('modal-styles')) {
    const styles = document.createElement('style');
    styles.id = 'modal-styles';
    styles.textContent = `
      .modal {
        display: none;
        position: fixed;
        z-index: 1000;
        left: 0;
        top: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0,0,0,0.5);
      }
      .modal-content {
        background-color: #fff;
        margin: 5% auto;
        padding: 20px;
        width: 80%;
        max-width: 900px;
        border-radius: 5px;
        box-shadow: 0 4px 8px rgba(0,0,0,0.2);
      }
      .modal-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        border-bottom: 1px solid #ddd;
        padding-bottom: 10px;
        margin-bottom: 20px;
      }
      .close-btn {
        font-size: 24px;
        cursor: pointer;
      }
      .form-group {
        margin-bottom: 15px;
      }
      .form-group label {
        display: block;
        margin-bottom: 5px;
        font-weight: bold;
      }
      .form-group input, .form-group textarea {
        width: 100%;
        padding: 8px;
        border: 1px solid #ddd;
        border-radius: 4px;
      }
      .modal-footer {
        text-align: right;
        border-top: 1px solid #ddd;
        padding-top: 15px;
        margin-top: 20px;
      }
      .modal-footer button {
        padding: 8px 16px;
        margin-left: 10px;
        cursor: pointer;
      }
      .breadcrumb {
        padding: 10px 0;
        margin-bottom: 20px;
      }
      .crumb {
        cursor: pointer;
        color: #0066cc;
      }
      .crumb:hover {
        text-decoration: underline;
      }
      .folder-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 10px;
        background-color: #f5f5f5;
        border-radius: 4px;
        margin-bottom: 15px;
      }
      .folder-path {
        font-weight: bold;
      }
      .action-btn {
        padding: 5px 10px;
        margin-left: 10px;
        cursor: pointer;
      }
      .folder-item {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 10px;
        border-bottom: 1px solid #eee;
      }
      .folder-name {
        cursor: pointer;
        font-weight: bold;
        color: #333;
      }
      .folder-name:hover {
        color: #0066cc;
      }
    `;
    document.head.appendChild(styles);
  }
}

// 12. L∆ØU B√ÄI VI·∫æT
async function savePost(path, sha) {
  try {
    const user = window.netlifyIdentity.currentUser();
    if (!user || !user.token || !user.token.access_token) {
      throw new Error('B·∫°n c·∫ßn ƒëƒÉng nh·∫≠p l·∫°i');
    }
    
    const titleInput = document.getElementById('edit-title');
    const contentTextarea = document.getElementById('edit-content');
    
    if (!titleInput || !contentTextarea) {
      throw new Error('Kh√¥ng t√¨m th·∫•y form ch·ªânh s·ª≠a');
    }
    
    const title = titleInput.value.trim();
    const content = contentTextarea.value;
    
    if (!title) {
      alert('Vui l√≤ng nh·∫≠p ti√™u ƒë·ªÅ b√†i vi·∫øt');
      return;
    }
    
    // Chu·∫©n b·ªã d·ªØ li·ªáu c·∫≠p nh·∫≠t
    const updateData = {
      message: `C·∫≠p nh·∫≠t b√†i vi·∫øt: ${title}`,
      content: btoa(content), // M√£ h√≥a n·ªôi dung th√†nh Base64
      sha: sha,
      branch: 'main' // Ho·∫∑c branch m·∫∑c ƒë·ªãnh c·ªßa b·∫°n
    };
    
    // G·ª≠i y√™u c·∫ßu c·∫≠p nh·∫≠t
    const response = await fetch(`/.netlify/git/github/contents/${path}`, {
      method: 'PUT',
      headers: {
        'Authorization': `Bearer ${user.token.access_token}`,
        'Content-Type': 'application/json',
        'Accept': 'application/vnd.github.v3+json'
      },
      body: JSON.stringify(updateData)
    });
    
    if (!response.ok) {
      const errorData = await response.json().catch(() => ({}));
      throw new Error(errorData.message || `L·ªói HTTP ${response.status}`);
    }
    
    // ƒê√≥ng modal
    document.getElementById('edit-modal').style.display = 'none';
    
    // T·∫£i l·∫°i d·ªØ li·ªáu th∆∞ m·ª•c hi·ªán t·∫°i
    alert('C·∫≠p nh·∫≠t b√†i vi·∫øt th√†nh c√¥ng!');
    const folderPath = path.substring(0, path.lastIndexOf('/'));
    loadFolderContents(folderPath);
    
  } catch (error) {
    console.error('L·ªói khi l∆∞u b√†i vi·∫øt:', error);
    alert(`L·ªói: ${error.message || 'Kh√¥ng th·ªÉ l∆∞u b√†i vi·∫øt'}`);
  }
}

// 13. X√ìA B√ÄI VI·∫æT HO·∫∂C TH∆Ø M·ª§C
async function deleteItem(path, sha, isFolder) {
  const itemType = isFolder ? 'th∆∞ m·ª•c' : 'b√†i vi·∫øt';
  const confirmMessage = `B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a ${itemType} n√†y kh√¥ng?`;
  
  if (!confirm(confirmMessage)) {
    return;
  }
  
  try {
    const user = window.netlifyIdentity.currentUser();
    if (!user || !user.token || !user.token.access_token) {
      throw new Error('B·∫°n c·∫ßn ƒëƒÉng nh·∫≠p l·∫°i');
    }
    
    if (isFolder) {
      // X√≥a th∆∞ m·ª•c (c·∫ßn t·∫£i v√† x√≥a t·ª´ng file trong th∆∞ m·ª•c)
      await deleteFolderRecursive(path, user.token.access_token);
    } else {
      // X√≥a file
      const deleteData = {
        message: `X√≥a ${itemType}: ${path}`,
        sha: sha,
        branch: 'main' // Ho·∫∑c branch m·∫∑c ƒë·ªãnh c·ªßa b·∫°n
      };
      
      const response = await fetch(`/.netlify/git/github/contents/${path}`, {
        method: 'DELETE',
        headers: {
          'Authorization': `Bearer ${user.token.access_token}`,
          'Content-Type': 'application/json',
          'Accept': 'application/vnd.github.v3+json'
        },
        body: JSON.stringify(deleteData)
      });
      
      if (!response.ok) {
        const errorData = await response.json().catch(() => ({}));
        throw new Error(errorData.message || `L·ªói HTTP ${response.status}`);
      }
    }
    
    // T·∫£i l·∫°i d·ªØ li·ªáu th∆∞ m·ª•c
    alert(`X√≥a ${itemType} th√†nh c√¥ng!`);
    const parentFolder = path.split('/').slice(0, -1).join('/');
    loadFolderContents(parentFolder || 'content');
    
  } catch (error) {
    console.error(`L·ªói khi x√≥a ${itemType}:`, error);
    alert(`L·ªói: ${error.message || `Kh√¥ng th·ªÉ x√≥a ${itemType}`}`);
  }
}

// 14. X√ìA TH∆Ø M·ª§C ƒê·ªÜ QUY
async function deleteFolderRecursive(folderPath, token) {
  try {
    // T·∫£i n·ªôi dung th∆∞ m·ª•c
    const response = await fetch(`/.netlify/git/github/contents/${folderPath}`, {
      headers: {
        'Authorization': `Bearer ${token}`,
        'Accept': 'application/vnd.github.v3+json'
      }
    });
    
    if (!response.ok) {
      throw new Error(`Kh√¥ng th·ªÉ t·∫£i n·ªôi dung th∆∞ m·ª•c: ${response.status}`);
    }
    
    const items = await response.json();
    
    // X√≥a t·ª´ng item trong th∆∞ m·ª•c
    for (const item of items) {
      if (item.type === 'dir') {
        // ƒê·ªá quy x√≥a th∆∞ m·ª•c con
        await deleteFolderRecursive(item.path, token);
      } else {
        // X√≥a file
        const deleteData = {
          message: `X√≥a file: ${item.path}`,
          sha: item.sha,
          branch: 'main'
        };
        
        const deleteResponse = await fetch(`/.netlify/git/github/contents/${item.path}`, {
          method: 'DELETE',
          headers: {
            'Authorization': `Bearer ${token}`,
            'Content-Type': 'application/json',
            'Accept': 'application/vnd.github.v3+json'
          },
          body: JSON.stringify(deleteData)
        });
        
        if (!deleteResponse.ok) {
          throw new Error(`Kh√¥ng th·ªÉ x√≥a file ${item.path}`);
        }
      }
    }
    
    console.log(`ƒê√£ x√≥a t·∫•t c·∫£ n·ªôi dung trong th∆∞ m·ª•c: ${folderPath}`);
    
  } catch (error) {
    console.error('L·ªói khi x√≥a th∆∞ m·ª•c ƒë·ªá quy:', error);
    throw error;
  }
}

// 15. TH√äM B√ÄI VI·∫æT M·ªöI
function addNewPost(folderPath) {
  // Hi·ªÉn th·ªã modal t·∫°o b√†i vi·∫øt m·ªõi
  let modal = document.getElementById('create-modal');
  if (!modal) {
    modal = document.createElement('div');
    modal.id = 'create-modal';
    modal.className = 'modal';
    
    document.body.appendChild(modal);
  }
  
  modal.innerHTML = `
    <div class="modal-content">
      <div class="modal-header">
        <h2>T·∫°o b√†i vi·∫øt m·ªõi</h2>
        <span class="close-btn" onclick="document.getElementById('create-modal').style.display='none'">&times;</span>
      </div>
      <div class="modal-body">
        <div class="form-group">
          <label for="new-title">Ti√™u ƒë·ªÅ:</label>
          <input type="text" id="new-title" placeholder="Nh·∫≠p ti√™u ƒë·ªÅ b√†i vi·∫øt" />
        </div>
        <div class="form-group">
          <label for="new-content">N·ªôi dung:</label>
          <textarea id="new-content" rows="20" placeholder="N·ªôi dung b√†i vi·∫øt (Markdown)"></textarea>
        </div>
      </div>
      <div class="modal-footer">
        <button onclick="createNewPost('${folderPath}')">T·∫°o</button>
        <button onclick="document.getElementById('create-modal').style.display='none'">H·ªßy</button>
      </div>
    </div>
  `;
  
  modal.style.display = 'block';
}

// 16. T·∫†O B√ÄI VI·∫æT M·ªöI
async function createNewPost(folderPath) {
  try {
    const user = window.netlifyIdentity.currentUser();
    if (!user || !user.token || !user.token.access_token) {
      throw new Error('B·∫°n c·∫ßn ƒëƒÉng nh·∫≠p l·∫°i');
    }
    
    const titleInput = document.getElementById('new-title');
    const contentTextarea = document.getElementById('new-content');
    
    if (!titleInput || !contentTextarea) {
      throw new Error('Kh√¥ng t√¨m th·∫•y form t·∫°o b√†i vi·∫øt');
    }
    
    const title = titleInput.value.trim();
    const content = contentTextarea.value;
    
    if (!title) {
      alert('Vui l√≤ng nh·∫≠p ti√™u ƒë·ªÅ b√†i vi·∫øt');
      return;
    }
    
    // Chu·∫©n b·ªã t√™n file
    const filename = title.toLowerCase()
      .replace(/[√†√°·∫°·∫£√£√¢·∫ß·∫•·∫≠·∫©·∫´ƒÉ·∫±·∫Ø·∫∑·∫≥·∫µ]/g, 'a')
      .replace(/[√®√©·∫π·∫ª·∫Ω√™·ªÅ·∫ø·ªá·ªÉ·ªÖ]/g, 'e')
      .replace(/[√¨√≠·ªã·ªâƒ©]/g, 'i')
      .replace(/[√≤√≥·ªç·ªè√µ√¥·ªì·ªë·ªô·ªï·ªó∆°·ªù·ªõ·ª£·ªü·ª°]/g, 'o')
      .replace(/[√π√∫·ª•·ªß≈©∆∞·ª´·ª©·ª±·ª≠·ªØ]/g, 'u')
      .replace(/[·ª≥√Ω·ªµ·ª∑·ªπ]/g, 'y')
      .replace(/ƒë/g, 'd')
      .replace(/\s+/g, '-')
      .replace(/[^a-z0-9-]/g, '')
      .replace(/-+/g, '-');
    
    const path = `${folderPath}/${filename}.md`;
    
    // Chu·∫©n b·ªã d·ªØ li·ªáu t·∫°o m·ªõi
    const createData = {
      message: `T·∫°o b√†i vi·∫øt m·ªõi: ${title}`,
      content: btoa(content), // M√£ h√≥a n·ªôi dung th√†nh Base64
      branch: 'main' // Ho·∫∑c branch m·∫∑c ƒë·ªãnh c·ªßa b·∫°n
    };
    
    // G·ª≠i y√™u c·∫ßu t·∫°o m·ªõi
    const response = await fetch(`/.netlify/git/github/contents/${path}`, {
      method: 'PUT',
      headers: {
        'Authorization': `Bearer ${user.token.access_token}`,
        'Content-Type': 'application/json',
        'Accept': 'application/vnd.github.v3+json'
      },
      body: JSON.stringify(createData)
    });
    
    if (!response.ok) {
      const errorData = await response.json().catch(() => ({}));
      throw new Error(errorData.message || `L·ªói HTTP ${response.status}`);
    }
    
    // ƒê√≥ng modal
    document.getElementById('create-modal').style.display = 'none';
    
    // T·∫£i l·∫°i d·ªØ li·ªáu th∆∞ m·ª•c hi·ªán t·∫°i
    alert('T·∫°o b√†i vi·∫øt th√†nh c√¥ng!');
    loadFolderContents(folderPath);
    
  } catch (error) {
    console.error('L·ªói khi t·∫°o b√†i vi·∫øt m·ªõi:', error);
    alert(`L·ªói: ${error.message || 'Kh√¥ng th·ªÉ t·∫°o b√†i vi·∫øt m·ªõi'}`);
  }
}

// 17. TH√äM TH∆Ø M·ª§C M·ªöI
function addNewFolder(parentPath) {
  const folderName = prompt('Nh·∫≠p t√™n th∆∞ m·ª•c m·ªõi:');
  
  if (!folderName || !folderName.trim()) {
    return;
  }
  
  // Chu·∫©n b·ªã t√™n th∆∞ m·ª•c
  const formattedName = folderName.trim()
    .toLowerCase()
    .replace(/[√†√°·∫°·∫£√£√¢·∫ß·∫•·∫≠·∫©·∫´ƒÉ·∫±·∫Ø·∫∑·∫≥·∫µ]/g, 'a')
    .replace(/[√®√©·∫π·∫ª·∫Ω√™·ªÅ·∫ø·ªá·ªÉ·ªÖ]/g, 'e')
    .replace(/[√¨√≠·ªã·ªâƒ©]/g, 'i')
    .replace(/[√≤√≥·ªç·ªè√µ√¥·ªì·ªë·ªô·ªï·ªó∆°·ªù·ªõ·ª£·ªü·ª°]/g, 'o')
    .replace(/[√π√∫·ª•·ªß≈©∆∞·ª´·ª©·ª±·ª≠·ªØ]/g, 'u')
    .replace(/[·ª≥√Ω·ªµ·ª∑·ªπ]/g, 'y')
    .replace(/ƒë/g, 'd')
    .replace(/\s+/g, '-')
    .replace(/[^a-z0-9-]/g, '')
    .replace(/-+/g, '-');
    
  // T·∫°o th∆∞ m·ª•c m·ªõi b·∫±ng c√°ch t·∫°o file README.md trong th∆∞ m·ª•c ƒë√≥
  const path = `${parentPath}/${formattedName}/README.md`;
  
  createNewPost(path, `# ${folderName}\n\nTh∆∞ m·ª•c n√†y ch·ª©a n·ªôi dung v·ªÅ ${folderName}.`);
}

// 18. T·∫†O B√ÄI VI·∫æT M·ªöI (PHI√äN B·∫¢N M·ªû R·ªòNG)
async function createNewPost(path, defaultContent = '') {
  try {
    const user = window.netlifyIdentity.currentUser();
    if (!user || !user.token || !user.token.access_token) {
      throw new Error('B·∫°n c·∫ßn ƒëƒÉng nh·∫≠p l·∫°i');
    }
    
    // N·∫øu kh√¥ng ph·∫£i l√† mode t·∫°o th∆∞ m·ª•c
    if (!defaultContent) {
      const titleInput = document.getElementById('new-title');
      const contentTextarea = document.getElementById('new-content');
      
      if (!titleInput || !contentTextarea) {
        throw new Error('Kh√¥ng t√¨m th·∫•y form t·∫°o b√†i vi·∫øt');
      }
      
      const title = titleInput.value.trim();
      defaultContent = contentTextarea.value;
      
      if (!title) {
        alert('Vui l√≤ng nh·∫≠p ti√™u ƒë·ªÅ b√†i vi·∫øt');
        return;
      }
    }
    
    // Chu·∫©n b·ªã d·ªØ li·ªáu t·∫°o m·ªõi
    const createData = {
      message: `T·∫°o n·ªôi dung m·ªõi t·∫°i: ${path}`,
      content: btoa(defaultContent), // M√£ h√≥a n·ªôi dung th√†nh Base64
      branch: 'main' // Ho·∫∑c branch m·∫∑c ƒë·ªãnh c·ªßa b·∫°n
    };
    
    // G·ª≠i y√™u c·∫ßu t·∫°o m·ªõi
    const response = await fetch(`/.netlify/git/github/contents/${path}`, {
      method: 'PUT',
      headers: {
        'Authorization': `Bearer ${user.token.access_token}`,
        'Content-Type': 'application/json',
        'Accept': 'application/vnd.github.v3+json'
      },
      body: JSON.stringify(createData)
    });
    
    if (!response.ok) {
      const errorData = await response.json().catch(() => ({}));
      throw new Error(errorData.message || `L·ªói HTTP ${response.status}`);
    }
    
    // ƒê√≥ng modal n·∫øu ƒëang m·ªü
    const createModal = document.getElementById('create-modal');
    if (createModal) {
      createModal.style.display = 'none';
    }
    
    // T·∫£i l·∫°i d·ªØ li·ªáu th∆∞ m·ª•c cha
    const parentFolder = path.split('/').slice(0, -1).join('/');
    if (!defaultContent) { // N·∫øu kh√¥ng ph·∫£i l√† mode t·∫°o th∆∞ m·ª•c
      alert('T·∫°o n·ªôi dung th√†nh c√¥ng!');
    }
    loadFolderContents(parentFolder || 'content');
    
  } catch (error) {
    console.error('L·ªói khi t·∫°o n·ªôi dung m·ªõi:', error);
    alert(`L·ªói: ${error.message || 'Kh√¥ng th·ªÉ t·∫°o n·ªôi dung m·ªõi'}`);
  }
}

// ƒêƒÉng k√Ω c√°c h√†m to√†n c·ª•c
window.loadFolderContents = loadFolderContents;
window.editPost = editPost;
window.deleteItem = deleteItem;
window.viewPost = viewPost;
window.createNewPost = createNewPost;
window.addNewPost = addNewPost;
window.addNewFolder = addNewFolder;