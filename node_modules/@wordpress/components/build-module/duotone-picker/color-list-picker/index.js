import { createElement, Fragment } from "@wordpress/element";

/**
 * WordPress dependencies
 */
import { useState } from '@wordpress/element';
import { swatch } from '@wordpress/icons';
/**
 * Internal dependencies
 */

import Button from '../../button';
import ColorPalette from '../../color-palette';
import ColorIndicator from '../../color-indicator';
import Icon from '../../icon';
import { HStack } from '../../h-stack';

function ColorOption(_ref) {
  let {
    label,
    value,
    colors,
    disableCustomColors,
    enableAlpha,
    onChange
  } = _ref;
  const [isOpen, setIsOpen] = useState(false);
  return createElement(Fragment, null, createElement(Button, {
    className: "components-color-list-picker__swatch-button",
    onClick: () => setIsOpen(prev => !prev)
  }, createElement(HStack, {
    justify: "flex-start",
    spacing: 2
  }, value ? createElement(ColorIndicator, {
    colorValue: value,
    className: "components-color-list-picker__swatch-color"
  }) : createElement(Icon, {
    icon: swatch
  }), createElement("span", null, label))), isOpen && createElement(ColorPalette, {
    className: "components-color-list-picker__color-picker",
    colors: colors,
    value: value,
    clearable: false,
    onChange: onChange,
    disableCustomColors: disableCustomColors,
    enableAlpha: enableAlpha
  }));
}

function ColorListPicker(_ref2) {
  let {
    colors,
    labels,
    value = [],
    disableCustomColors,
    enableAlpha,
    onChange
  } = _ref2;
  return createElement("div", {
    className: "components-color-list-picker"
  }, labels.map((label, index) => createElement(ColorOption, {
    key: index,
    label: label,
    value: value[index],
    colors: colors,
    disableCustomColors: disableCustomColors,
    enableAlpha: enableAlpha,
    onChange: newColor => {
      const newColors = value.slice();
      newColors[index] = newColor;
      onChange(newColors);
    }
  })));
}

export default ColorListPicker;
//# sourceMappingURL=index.js.map