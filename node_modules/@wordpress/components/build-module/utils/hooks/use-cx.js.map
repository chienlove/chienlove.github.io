{"version":3,"sources":["@wordpress/components/src/utils/hooks/use-cx.ts"],"names":["__unsafe_useEmotionCache","useEmotionCache","insertStyles","cx","innerCx","useCallback","isSerializedStyles","o","every","p","useCx","cache","Error","classNames","map","arg","key","name"],"mappings":"AAAA;AACA;AACA;AACA,SAASA,wBAAwB,IAAIC,eAArC,QAA4D,gBAA5D;AAEA,SAASC,YAAT,QAA6B,gBAA7B,C,CACA;;AACA,SAASC,EAAE,IAAIC,OAAf,QAA6C,cAA7C;AAEA;AACA;AACA;;AACA,SAASC,WAAT,QAA4B,oBAA5B;;AAEA,MAAMC,kBAAkB,GAAKC,CAAF,IAC1B,OAAOA,CAAP,KAAa,WAAb,IACAA,CAAC,KAAK,IADN,IAEA,CAAE,MAAF,EAAU,QAAV,EAAqBC,KAArB,CAA8BC,CAAF,IAAS,OAAOF,CAAC,CAAEE,CAAF,CAAR,KAAkB,WAAvD,CAHD;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,OAAO,MAAMC,KAAK,GAAG,MAAM;AAC1B,QAAMC,KAAK,GAAGV,eAAe,EAA7B;AAEA,QAAME,EAAE,GAAGE,WAAW,CACrB,YAA6D;AAC5D,QAAKM,KAAK,KAAK,IAAf,EAAsB;AACrB,YAAM,IAAIC,KAAJ,CACL,2EADK,CAAN;AAGA;;AAL2D,sCAAxDC,UAAwD;AAAxDA,MAAAA,UAAwD;AAAA;;AAO5D,WAAOT,OAAO,CACb,GAAGS,UAAU,CAACC,GAAX,CAAkBC,GAAF,IAAW;AAC7B,UAAKT,kBAAkB,CAAES,GAAF,CAAvB,EAAiC;AAChCb,QAAAA,YAAY,CAAES,KAAF,EAASI,GAAT,EAAc,KAAd,CAAZ;AACA,eAAQ,GAAGJ,KAAK,CAACK,GAAK,IAAID,GAAG,CAACE,IAAM,EAApC;AACA;;AACD,aAAOF,GAAP;AACA,KANE,CADU,CAAd;AASA,GAjBoB,EAkBrB,CAAEJ,KAAF,CAlBqB,CAAtB;AAqBA,SAAOR,EAAP;AACA,CAzBM","sourcesContent":["/**\n * External dependencies\n */\nimport { __unsafe_useEmotionCache as useEmotionCache } from '@emotion/react';\nimport type { SerializedStyles } from '@emotion/serialize';\nimport { insertStyles } from '@emotion/utils';\n// eslint-disable-next-line no-restricted-imports\nimport { cx as innerCx, ClassNamesArg } from '@emotion/css';\n\n/**\n * WordPress dependencies\n */\nimport { useCallback } from '@wordpress/element';\n\nconst isSerializedStyles = ( o: any ): o is SerializedStyles =>\n\ttypeof o !== 'undefined' &&\n\to !== null &&\n\t[ 'name', 'styles' ].every( ( p ) => typeof o[ p ] !== 'undefined' );\n\n/**\n * Retrieve a `cx` function that knows how to handle `SerializedStyles`\n * returned by the `@emotion/react` `css` function in addition to what\n * `cx` normally knows how to handle. It also hooks into the Emotion\n * Cache, allowing `css` calls to work inside iframes.\n *\n * @example\n * import { css } from '@emotion/react';\n *\n * const styles = css`\n * \tcolor: red\n * `;\n *\n * function RedText( { className, ...props } ) {\n * \tconst cx = useCx();\n *\n * \tconst classes = cx(styles, className);\n *\n * \treturn <span className={classes} {...props} />;\n * }\n */\nexport const useCx = () => {\n\tconst cache = useEmotionCache();\n\n\tconst cx = useCallback(\n\t\t( ...classNames: ( ClassNamesArg | SerializedStyles )[] ) => {\n\t\t\tif ( cache === null ) {\n\t\t\t\tthrow new Error(\n\t\t\t\t\t'The `useCx` hook should be only used within a valid Emotion Cache Context'\n\t\t\t\t);\n\t\t\t}\n\n\t\t\treturn innerCx(\n\t\t\t\t...classNames.map( ( arg ) => {\n\t\t\t\t\tif ( isSerializedStyles( arg ) ) {\n\t\t\t\t\t\tinsertStyles( cache, arg, false );\n\t\t\t\t\t\treturn `${ cache.key }-${ arg.name }`;\n\t\t\t\t\t}\n\t\t\t\t\treturn arg;\n\t\t\t\t} )\n\t\t\t);\n\t\t},\n\t\t[ cache ]\n\t);\n\n\treturn cx;\n};\n"]}