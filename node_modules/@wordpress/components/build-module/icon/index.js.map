{"version":3,"sources":["@wordpress/components/src/icon/index.tsx"],"names":["cloneElement","createElement","isValidElement","SVG","Dashicon","Icon","icon","size","additionalProps","type","appliedProps","props","width","height"],"mappings":";;AAAA;AACA;AACA;;AAGA;AACA;AACA;AACA,SACCA,YADD,EAECC,aAFD,EAGCC,cAHD,QAIO,oBAJP;AAKA,SAASC,GAAT,QAAoB,uBAApB;AAEA;AACA;AACA;;AACA,OAAOC,QAAP,MAAqB,aAArB;;AAiCA,SAASC,IAAT,OAIW;AAAA,MAJI;AACdC,IAAAA,IAAI,GAAG,IADO;AAEdC,IAAAA,IAAI,GAAG,aAAa,OAAOD,IAApB,GAA2B,EAA3B,GAAgC,EAFzB;AAGd,OAAGE;AAHW,GAIJ;;AACV,MAAK,aAAa,OAAOF,IAAzB,EAAgC;AAC/B,WACC,cAAC,QAAD;AACC,MAAA,IAAI,EAAGA,IADR;AAEC,MAAA,IAAI,EAAGC;AAFR,OAGQC,eAHR,EADD;AAOA;;AAED,MAAKN,cAAc,CAAEI,IAAF,CAAd,IAA0BF,QAAQ,KAAKE,IAAI,CAACG,IAAjD,EAAwD;AACvD,WAAOT,YAAY,CAAEM,IAAF,EAAQ,EAC1B,GAAGE;AADuB,KAAR,CAAnB;AAGA;;AAED,MAAK,eAAe,OAAOF,IAA3B,EAAkC;AACjC,WAAOL,aAAa,CAAEK,IAAF,EAAQ;AAC3BC,MAAAA,IAD2B;AAE3B,SAAGC;AAFwB,KAAR,CAApB;AAIA;;AAED,MAAKF,IAAI,KAAMA,IAAI,CAACG,IAAL,KAAc,KAAd,IAAuBH,IAAI,CAACG,IAAL,KAAcN,GAA3C,CAAT,EAA4D;AAC3D,UAAMO,YAAY,GAAG,EACpB,GAAGJ,IAAI,CAACK,KADY;AAEpBC,MAAAA,KAAK,EAAEL,IAFa;AAGpBM,MAAAA,MAAM,EAAEN,IAHY;AAIpB,SAAGC;AAJiB,KAArB;AAOA,WAAO,cAAC,GAAD,EAAUE,YAAV,CAAP;AACA;;AAED,MAAKR,cAAc,CAAEI,IAAF,CAAnB,EAA8B;AAC7B,WAAON,YAAY,CAAEM,IAAF,EAAQ;AAC1B;AACAC,MAAAA,IAF0B;AAG1B,SAAGC;AAHuB,KAAR,CAAnB;AAKA;;AAED,SAAOF,IAAP;AACA;;AAED,eAAeD,IAAf","sourcesContent":["/**\n * External dependencies\n */\nimport type { ComponentType, HTMLProps, SVGProps } from 'react';\n\n/**\n * WordPress dependencies\n */\nimport {\n\tcloneElement,\n\tcreateElement,\n\tisValidElement,\n} from '@wordpress/element';\nimport { SVG } from '@wordpress/primitives';\n\n/**\n * Internal dependencies\n */\nimport Dashicon from '../dashicon';\nimport type { IconKey as DashiconIconKey } from '../dashicon/types';\n\nexport type IconType =\n\t| DashiconIconKey\n\t| ComponentType< { size?: number } >\n\t| ( ( props: { size?: number } ) => JSX.Element )\n\t| JSX.Element;\n\ninterface BaseProps {\n\t/**\n\t * The icon to render. Supported values are: Dashicons (specified as\n\t * strings), functions, Component instances and `null`.\n\t *\n\t * @default null\n\t */\n\ticon?: IconType | null;\n\t/**\n\t * The size (width and height) of the icon.\n\t *\n\t * @default `20` when a Dashicon is rendered, `24` for all other icons.\n\t */\n\tsize?: number;\n}\n\ntype AdditionalProps< T > = T extends ComponentType< infer U >\n\t? U\n\t: T extends DashiconIconKey\n\t? SVGProps< SVGSVGElement >\n\t: {};\n\nexport type Props = BaseProps & AdditionalProps< IconType >;\n\nfunction Icon( {\n\ticon = null,\n\tsize = 'string' === typeof icon ? 20 : 24,\n\t...additionalProps\n}: Props ) {\n\tif ( 'string' === typeof icon ) {\n\t\treturn (\n\t\t\t<Dashicon\n\t\t\t\ticon={ icon }\n\t\t\t\tsize={ size }\n\t\t\t\t{ ...( additionalProps as HTMLProps< HTMLSpanElement > ) }\n\t\t\t/>\n\t\t);\n\t}\n\n\tif ( isValidElement( icon ) && Dashicon === icon.type ) {\n\t\treturn cloneElement( icon, {\n\t\t\t...additionalProps,\n\t\t} );\n\t}\n\n\tif ( 'function' === typeof icon ) {\n\t\treturn createElement( icon, {\n\t\t\tsize,\n\t\t\t...additionalProps,\n\t\t} );\n\t}\n\n\tif ( icon && ( icon.type === 'svg' || icon.type === SVG ) ) {\n\t\tconst appliedProps = {\n\t\t\t...icon.props,\n\t\t\twidth: size,\n\t\t\theight: size,\n\t\t\t...additionalProps,\n\t\t};\n\n\t\treturn <SVG { ...appliedProps } />;\n\t}\n\n\tif ( isValidElement( icon ) ) {\n\t\treturn cloneElement( icon, {\n\t\t\t// @ts-ignore Just forwarding the size prop along\n\t\t\tsize,\n\t\t\t...additionalProps,\n\t\t} );\n\t}\n\n\treturn icon;\n}\n\nexport default Icon;\n"]}