{"version":3,"sources":["@wordpress/components/src/theme/index.tsx"],"names":["useMemo","colorVariables","Wrapper","generateThemeVariables","useCx","Theme","accent","background","className","props","cx","classes"],"mappings":";;;AAAA;AACA;AACA;AACA,SAASA,OAAT,QAAwB,oBAAxB;AAEA;AACA;AACA;;AAGA,SAASC,cAAT,EAAyBC,OAAzB,QAAwC,UAAxC;AACA,SAASC,sBAAT,QAAuC,oBAAvC;AACA,SAASC,KAAT,QAAsB,UAAtB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,KAAT,OAKwD;AAAA,MALxC;AACfC,IAAAA,MADe;AAEfC,IAAAA,UAFe;AAGfC,IAAAA,SAHe;AAIf,OAAGC;AAJY,GAKwC;AACvD,QAAMC,EAAE,GAAGN,KAAK,EAAhB;AACA,QAAMO,OAAO,GAAGX,OAAO,CACtB,MACCU,EAAE,CACD,GAAGT,cAAc,CAChBE,sBAAsB,CAAE;AAAEG,IAAAA,MAAF;AAAUC,IAAAA;AAAV,GAAF,CADN,CADhB,EAIDC,SAJC,CAFmB,EAQtB,CAAEF,MAAF,EAAUC,UAAV,EAAsBC,SAAtB,EAAiCE,EAAjC,CARsB,CAAvB;AAWA,SAAO,cAAC,OAAD;AAAS,IAAA,SAAS,EAAGC;AAArB,KAAoCF,KAApC,EAAP;AACA;;AAED,eAAeJ,KAAf","sourcesContent":["/**\n * WordPress dependencies\n */\nimport { useMemo } from '@wordpress/element';\n\n/**\n * Internal dependencies\n */\nimport type { ThemeProps } from './types';\nimport type { WordPressComponentProps } from '../ui/context';\nimport { colorVariables, Wrapper } from './styles';\nimport { generateThemeVariables } from './color-algorithms';\nimport { useCx } from '../utils';\n\n/**\n * `Theme` allows defining theme variables for components in the `@wordpress/components` package.\n *\n * Multiple `Theme` components can be nested in order to override specific theme variables.\n *\n *\n * @example\n * ```jsx\n * import { __experimentalTheme as Theme } from '@wordpress/components';\n *\n * const Example = () => {\n *   return (\n *     <Theme accent=\"red\">\n *       <Button variant=\"primary\">I'm red</Button>\n *       <Theme accent=\"blue\">\n *         <Button variant=\"primary\">I'm blue</Button>\n *       </Theme>\n *     </Theme>\n *   );\n * };\n * ```\n */\nfunction Theme( {\n\taccent,\n\tbackground,\n\tclassName,\n\t...props\n}: WordPressComponentProps< ThemeProps, 'div', true > ) {\n\tconst cx = useCx();\n\tconst classes = useMemo(\n\t\t() =>\n\t\t\tcx(\n\t\t\t\t...colorVariables(\n\t\t\t\t\tgenerateThemeVariables( { accent, background } )\n\t\t\t\t),\n\t\t\t\tclassName\n\t\t\t),\n\t\t[ accent, background, className, cx ]\n\t);\n\n\treturn <Wrapper className={ classes } { ...props } />;\n}\n\nexport default Theme;\n"]}