{"version":3,"sources":["@wordpress/components/src/mobile/utils/alignments.native.js"],"names":["getBlockType","WIDE_ALIGNMENTS","alignments","wide","full","excludeBlocks","notInnerContainers","ALIGNMENT_BREAKPOINTS","large","medium","small","mobile","isFullWidth","align","isWideWidth","isWider","width","breakpoint","isContainerRelated","blockName","includes","hasFullWidthSupport","hasParentFullWidthSupport","blockType","blockAlign","supports","Array","isArray","parent","some","alignmentHelpers"],"mappings":"AAAA;AACA;AACA;AACA,SAASA,YAAT,QAA6B,mBAA7B;AAEA,OAAO,MAAMC,eAAe,GAAG;AAC9BC,EAAAA,UAAU,EAAE;AACXC,IAAAA,IAAI,EAAE,MADK;AAEXC,IAAAA,IAAI,EAAE;AAFK,GADkB;AAK9BC,EAAAA,aAAa,EAAE,CAAE,cAAF,CALe;AAM9BC,EAAAA,kBAAkB,EAAE,CACnB,gBADmB,EAEnB,iBAFmB,EAGnB,gBAHmB;AANU,CAAxB;AAaP,OAAO,MAAMC,qBAAqB,GAAG;AACpCJ,EAAAA,IAAI,EAAE,IAD8B;AAEpCK,EAAAA,KAAK,EAAE,GAF6B;AAGpCC,EAAAA,MAAM,EAAE,GAH4B;AAIpCC,EAAAA,KAAK,EAAE,GAJ6B;AAKpCC,EAAAA,MAAM,EAAE;AAL4B,CAA9B;;AAQP,MAAMC,WAAW,GAAKC,KAAF,IAAaA,KAAK,KAAKZ,eAAe,CAACC,UAAhB,CAA2BE,IAAtE;;AAEA,MAAMU,WAAW,GAAKD,KAAF,IAAaA,KAAK,KAAKZ,eAAe,CAACC,UAAhB,CAA2BC,IAAtE;;AAEA,MAAMY,OAAO,GAAG,CAAEC,KAAF,EAASC,UAAT,KACfD,KAAK,GAAGT,qBAAqB,CAAEU,UAAF,CAD9B;;AAGA,MAAMC,kBAAkB,GAAKC,SAAF,IAAiB;AAC3C,MAAKlB,eAAe,CAACK,kBAAhB,CAAmCc,QAAnC,CAA6CD,SAA7C,CAAL,EAAgE;AAC/D,WAAO,KAAP;AACA;;AAED,MAAKE,mBAAmB,CAAEF,SAAF,CAAxB,EAAwC;AACvC,WAAO,IAAP;AACA;;AAED,SAAOG,yBAAyB,CAAEH,SAAF,CAAhC;AACA,CAVD;AAYA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASE,mBAAT,CAA8BF,SAA9B,EAA0C;AAAA;;AACzC,QAAMI,SAAS,GAAGvB,YAAY,CAAEmB,SAAF,CAA9B;AACA,QAAMK,UAAU,GAAGD,SAAH,aAAGA,SAAH,8CAAGA,SAAS,CAAEE,QAAd,wDAAG,oBAAqBZ,KAAxC;AACA,SACC,CAAC,CAAEa,KAAK,CAACC,OAAN,CAAeH,UAAf,CAAH,IACAA,UAAU,CAACJ,QAAX,CAAqBnB,eAAe,CAACC,UAAhB,CAA2BE,IAAhD,CAFD;AAIA;AACD;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASkB,yBAAT,CAAoCH,SAApC,EAAgD;AAAA;;AAC/C,QAAMI,SAAS,GAAGvB,YAAY,CAAEmB,SAAF,CAA9B;AACA,SAAO,CAAC,EAAEI,SAAF,aAAEA,SAAF,oCAAEA,SAAS,CAAEK,MAAb,8CAAE,kBAAmBC,IAAnB,CAAyBR,mBAAzB,CAAF,CAAR;AACA;;AAED,OAAO,MAAMS,gBAAgB,GAAG;AAC/BlB,EAAAA,WAD+B;AAE/BE,EAAAA,WAF+B;AAG/BC,EAAAA,OAH+B;AAI/BG,EAAAA;AAJ+B,CAAzB","sourcesContent":["/**\n * WordPress dependencies\n */\nimport { getBlockType } from '@wordpress/blocks';\n\nexport const WIDE_ALIGNMENTS = {\n\talignments: {\n\t\twide: 'wide',\n\t\tfull: 'full',\n\t},\n\texcludeBlocks: [ 'core/heading' ],\n\tnotInnerContainers: [\n\t\t'core/separator',\n\t\t'core/media-text',\n\t\t'core/pullquote',\n\t],\n};\n\nexport const ALIGNMENT_BREAKPOINTS = {\n\twide: 1024,\n\tlarge: 820,\n\tmedium: 768,\n\tsmall: 680,\n\tmobile: 480,\n};\n\nconst isFullWidth = ( align ) => align === WIDE_ALIGNMENTS.alignments.full;\n\nconst isWideWidth = ( align ) => align === WIDE_ALIGNMENTS.alignments.wide;\n\nconst isWider = ( width, breakpoint ) =>\n\twidth > ALIGNMENT_BREAKPOINTS[ breakpoint ];\n\nconst isContainerRelated = ( blockName ) => {\n\tif ( WIDE_ALIGNMENTS.notInnerContainers.includes( blockName ) ) {\n\t\treturn false;\n\t}\n\n\tif ( hasFullWidthSupport( blockName ) ) {\n\t\treturn true;\n\t}\n\n\treturn hasParentFullWidthSupport( blockName );\n};\n\n/**\n * Whether the block has support for full width alignment.\n *\n * @param {string} blockName\n * @return {boolean} Return whether the block supports full width alignment.\n */\nfunction hasFullWidthSupport( blockName ) {\n\tconst blockType = getBlockType( blockName );\n\tconst blockAlign = blockType?.supports?.align;\n\treturn (\n\t\t!! Array.isArray( blockAlign ) &&\n\t\tblockAlign.includes( WIDE_ALIGNMENTS.alignments.full )\n\t);\n}\n/**\n * Whether the block's parent has support for full width alignment.\n *\n * @param {string} blockName\n * @return {boolean} Return whether the block's parent supports full width alignment.\n */\nfunction hasParentFullWidthSupport( blockName ) {\n\tconst blockType = getBlockType( blockName );\n\treturn !! blockType?.parent?.some( hasFullWidthSupport );\n}\n\nexport const alignmentHelpers = {\n\tisFullWidth,\n\tisWideWidth,\n\tisWider,\n\tisContainerRelated,\n};\n"]}