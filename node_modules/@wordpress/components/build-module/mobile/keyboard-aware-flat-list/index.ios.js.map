{"version":3,"sources":["@wordpress/components/src/mobile/keyboard-aware-flat-list/index.ios.js"],"names":["ScrollView","FlatList","useWindowDimensions","Animated","useAnimatedScrollHandler","useSharedValue","useCallback","useEffect","useRef","useThrottle","useTextInputOffset","useKeyboardOffset","useScrollToTextInput","useTextInputCaretPosition","AnimatedScrollView","createAnimatedComponent","KeyboardAwareFlatList","extraScrollHeight","innerRef","onScroll","scrollEnabled","scrollViewStyle","shouldPreventAutomaticScroll","props","scrollViewRef","scrollViewMeasurements","scrollViewYOffset","height","windowHeight","width","windowWidth","isLandscape","keyboardOffset","currentCaretData","getTextInputOffset","scrollToTextInputOffset","onScrollToTextInput","caret","textInputOffset","hasTextInputOffset","leading","current","scrollHandler","event","contentOffset","value","y","measureScrollView","scrollRef","getNativeScrollRef","measureInWindow","_x","onContentSizeChange","getRef","ref","contentInset","bottom","style","flex"],"mappings":"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","sourcesContent":["/**\n * External dependencies\n */\n\nimport { ScrollView, FlatList, useWindowDimensions } from 'react-native';\nimport Animated, {\n\tuseAnimatedScrollHandler,\n\tuseSharedValue,\n} from 'react-native-reanimated';\n\n/**\n * WordPress dependencies\n */\nimport { useCallback, useEffect, useRef } from '@wordpress/element';\nimport { useThrottle } from '@wordpress/compose';\n\n/**\n * Internal dependencies\n */\nimport useTextInputOffset from './use-text-input-offset';\nimport useKeyboardOffset from './use-keyboard-offset';\nimport useScrollToTextInput from './use-scroll-to-text-input';\nimport useTextInputCaretPosition from './use-text-input-caret-position';\n\nconst AnimatedScrollView = Animated.createAnimatedComponent( ScrollView );\n\n/**\n * React component that provides a FlatList that is aware of the keyboard state and can scroll\n * to the currently focused TextInput.\n *\n * @param {Object}   props                              Component props.\n * @param {number}   props.extraScrollHeight            Extra scroll height for the content.\n * @param {Function} props.innerRef                     Function to pass the ScrollView ref to the parent component.\n * @param {Function} props.onScroll                     Function to be called when the list is scrolled.\n * @param {boolean}  props.scrollEnabled                Whether the list can be scrolled.\n * @param {Object}   props.scrollViewStyle              Additional style for the ScrollView component.\n * @param {boolean}  props.shouldPreventAutomaticScroll Whether to prevent scrolling when there's a Keyboard offset set.\n * @param {Object}   props...                           Other props to pass to the FlatList component.\n * @return {WPComponent} KeyboardAwareFlatList component.\n */\nexport const KeyboardAwareFlatList = ( {\n\textraScrollHeight,\n\tinnerRef,\n\tonScroll,\n\tscrollEnabled,\n\tscrollViewStyle,\n\tshouldPreventAutomaticScroll,\n\t...props\n} ) => {\n\tconst scrollViewRef = useRef();\n\tconst scrollViewMeasurements = useRef();\n\tconst scrollViewYOffset = useSharedValue( -1 );\n\n\tconst { height: windowHeight, width: windowWidth } = useWindowDimensions();\n\tconst isLandscape = windowWidth >= windowHeight;\n\n\tconst [ keyboardOffset ] = useKeyboardOffset(\n\t\tscrollEnabled,\n\t\tshouldPreventAutomaticScroll\n\t);\n\n\tconst [ currentCaretData ] = useTextInputCaretPosition( scrollEnabled );\n\n\tconst [ getTextInputOffset ] = useTextInputOffset(\n\t\tscrollEnabled,\n\t\tscrollViewRef\n\t);\n\n\tconst [ scrollToTextInputOffset ] = useScrollToTextInput(\n\t\textraScrollHeight,\n\t\tkeyboardOffset,\n\t\tscrollEnabled,\n\t\tscrollViewMeasurements,\n\t\tscrollViewRef,\n\t\tscrollViewYOffset\n\t);\n\n\tconst onScrollToTextInput = useThrottle(\n\t\tuseCallback(\n\t\t\tasync ( caret ) => {\n\t\t\t\tconst textInputOffset = await getTextInputOffset( caret );\n\t\t\t\tconst hasTextInputOffset = textInputOffset !== null;\n\n\t\t\t\tif ( hasTextInputOffset ) {\n\t\t\t\t\tscrollToTextInputOffset( caret, textInputOffset );\n\t\t\t\t}\n\t\t\t},\n\t\t\t[ getTextInputOffset, scrollToTextInputOffset ]\n\t\t),\n\t\t200,\n\t\t{ leading: false }\n\t);\n\n\tuseEffect( () => {\n\t\tonScrollToTextInput( currentCaretData );\n\t}, [ currentCaretData, onScrollToTextInput ] );\n\n\t// When the orientation changes, the ScrollView measurements\n\t// need to be re-calculated.\n\tuseEffect( () => {\n\t\tscrollViewMeasurements.current = null;\n\t}, [ isLandscape ] );\n\n\tconst scrollHandler = useAnimatedScrollHandler( {\n\t\tonScroll: ( event ) => {\n\t\t\tconst { contentOffset } = event;\n\t\t\tscrollViewYOffset.value = contentOffset.y;\n\t\t\tonScroll( event );\n\t\t},\n\t} );\n\n\tconst measureScrollView = useCallback( () => {\n\t\tif ( scrollViewRef.current ) {\n\t\t\tconst scrollRef = scrollViewRef.current.getNativeScrollRef();\n\n\t\t\tscrollRef.measureInWindow( ( _x, y, width, height ) => {\n\t\t\t\tscrollViewMeasurements.current = { y, width, height };\n\t\t\t} );\n\t\t}\n\t}, [] );\n\n\tconst onContentSizeChange = useCallback( () => {\n\t\tonScrollToTextInput( currentCaretData );\n\n\t\t// Sets the first values when the content size changes.\n\t\tif ( ! scrollViewMeasurements.current ) {\n\t\t\tmeasureScrollView();\n\t\t}\n\t}, [ measureScrollView, onScrollToTextInput, currentCaretData ] );\n\n\tconst getRef = useCallback(\n\t\t( ref ) => {\n\t\t\tscrollViewRef.current = ref;\n\t\t\tinnerRef( ref );\n\t\t},\n\t\t[ innerRef ]\n\t);\n\n\t// Adds content insets when the keyboard is opened to have\n\t// extra padding at the bottom.\n\tconst contentInset = { bottom: keyboardOffset };\n\n\tconst style = [ { flex: 1 }, scrollViewStyle ];\n\n\treturn (\n\t\t<AnimatedScrollView\n\t\t\tautomaticallyAdjustContentInsets={ false }\n\t\t\tcontentInset={ contentInset }\n\t\t\tkeyboardShouldPersistTaps=\"handled\"\n\t\t\tonContentSizeChange={ onContentSizeChange }\n\t\t\tonScroll={ scrollHandler }\n\t\t\tref={ getRef }\n\t\t\tscrollEnabled={ scrollEnabled }\n\t\t\tscrollEventThrottle={ 16 }\n\t\t\tstyle={ style }\n\t\t>\n\t\t\t<FlatList { ...props } />\n\t\t</AnimatedScrollView>\n\t);\n};\n\nexport default KeyboardAwareFlatList;\n"]}