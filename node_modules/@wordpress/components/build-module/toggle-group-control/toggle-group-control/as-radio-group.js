import _extends from "@babel/runtime/helpers/esm/extends";
import { createElement } from "@wordpress/element";

/**
 * External dependencies
 */
// eslint-disable-next-line no-restricted-imports
import { RadioGroup, useRadioState } from 'reakit';
/**
 * WordPress dependencies
 */

import { useMergeRefs, useInstanceId, usePrevious, useResizeObserver } from '@wordpress/compose';
import { forwardRef, useRef } from '@wordpress/element';
/**
 * Internal dependencies
 */

import { View } from '../../view';
import ToggleGroupControlBackdrop from './toggle-group-control-backdrop';
import ToggleGroupControlContext from '../context';
import { useUpdateEffect } from '../../utils/hooks';

function UnforwardedToggleGroupControlAsRadioGroup(_ref, forwardedRef) {
  let {
    children,
    isAdaptiveWidth,
    label,
    onChange,
    size,
    value,
    ...otherProps
  } = _ref;
  const containerRef = useRef();
  const [resizeListener, sizes] = useResizeObserver();
  const baseId = useInstanceId(ToggleGroupControlAsRadioGroup, 'toggle-group-control-as-radio-group').toString();
  const radio = useRadioState({
    baseId,
    state: value
  });
  const previousValue = usePrevious(value); // Propagate radio.state change.

  useUpdateEffect(() => {
    // Avoid calling onChange if radio state changed
    // from incoming value.
    if (previousValue !== radio.state) {
      onChange(radio.state);
    }
  }, [radio.state]); // Sync incoming value with radio.state.

  useUpdateEffect(() => {
    if (value !== radio.state) {
      radio.setState(value);
    }
  }, [value]);
  return createElement(ToggleGroupControlContext.Provider, {
    value: { ...radio,
      isBlock: !isAdaptiveWidth,
      size
    }
  }, createElement(RadioGroup, _extends({}, radio, {
    "aria-label": label,
    as: View
  }, otherProps, {
    ref: useMergeRefs([containerRef, forwardedRef])
  }), resizeListener, createElement(ToggleGroupControlBackdrop, {
    state: radio.state,
    containerRef: containerRef,
    containerWidth: sizes.width,
    isAdaptiveWidth: isAdaptiveWidth
  }), children));
}

export const ToggleGroupControlAsRadioGroup = forwardRef(UnforwardedToggleGroupControlAsRadioGroup);
//# sourceMappingURL=as-radio-group.js.map