{"version":3,"sources":["@wordpress/components/src/draggable/index.native.js"],"names":["Gesture","GestureDetector","LongPressGestureHandler","Animated","useSharedValue","runOnJS","useAnimatedReaction","useAnimatedGestureHandler","createContext","useContext","useRef","useMemo","styles","Context","Provider","Draggable","children","onDragEnd","onDragOver","onDragStart","testID","isDragging","isPanActive","draggingId","panGestureRef","currentFirstTouchId","initialPosition","x","y","lastPosition","value","result","previous","id","getFirstTouchEvent","event","allTouches","find","touch","panGesture","Pan","manualActivation","onTouchesDown","firstEvent","onTouchesMove","state","activate","end","onTouchesCancelled","_event","onEnd","withRef","shouldCancelWhenOutside","withTestId","providerValue","draggable__container","DraggableTrigger","enabled","maxDistance","minDuration","onLongPress","onLongPressEnd","gestureHandler","onActive"],"mappings":"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","sourcesContent":["/**\n * External dependencies\n */\nimport {\n\tGesture,\n\tGestureDetector,\n\tLongPressGestureHandler,\n} from 'react-native-gesture-handler';\nimport Animated, {\n\tuseSharedValue,\n\trunOnJS,\n\tuseAnimatedReaction,\n\tuseAnimatedGestureHandler,\n} from 'react-native-reanimated';\n\n/**\n * WordPress dependencies\n */\nimport { createContext, useContext, useRef, useMemo } from '@wordpress/element';\n\n/**\n * Internal dependencies\n */\nimport styles from './style.scss';\n\nconst Context = createContext( {} );\nconst { Provider } = Context;\n\n/**\n * Draggable component.\n *\n * @param {Object}      props               Component props.\n * @param {JSX.Element} props.children      Children to be rendered.\n * @param {Function}    [props.onDragEnd]   Callback when dragging ends.\n * @param {Function}    [props.onDragOver]  Callback when dragging happens over an element.\n * @param {Function}    [props.onDragStart] Callback when dragging starts.\n * @param {string}      [props.testID]      Id used for querying the pan gesture in tests.\n *\n * @return {JSX.Element} The component to be rendered.\n */\nconst Draggable = ( {\n\tchildren,\n\tonDragEnd,\n\tonDragOver,\n\tonDragStart,\n\ttestID,\n} ) => {\n\tconst isDragging = useSharedValue( false );\n\tconst isPanActive = useSharedValue( false );\n\tconst draggingId = useSharedValue( '' );\n\tconst panGestureRef = useRef();\n\tconst currentFirstTouchId = useSharedValue( null );\n\n\tconst initialPosition = {\n\t\tx: useSharedValue( 0 ),\n\t\ty: useSharedValue( 0 ),\n\t};\n\tconst lastPosition = {\n\t\tx: useSharedValue( 0 ),\n\t\ty: useSharedValue( 0 ),\n\t};\n\n\tuseAnimatedReaction(\n\t\t() => isDragging.value,\n\t\t( result, previous ) => {\n\t\t\tif ( result === previous || previous === null ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif ( result ) {\n\t\t\t\tif ( onDragStart ) {\n\t\t\t\t\tonDragStart( {\n\t\t\t\t\t\tx: initialPosition.x.value,\n\t\t\t\t\t\ty: initialPosition.y.value,\n\t\t\t\t\t\tid: draggingId.value,\n\t\t\t\t\t} );\n\t\t\t\t}\n\t\t\t} else if ( onDragEnd ) {\n\t\t\t\tonDragEnd( {\n\t\t\t\t\tx: lastPosition.x.value,\n\t\t\t\t\ty: lastPosition.y.value,\n\t\t\t\t\tid: draggingId.value,\n\t\t\t\t} );\n\t\t\t}\n\t\t}\n\t);\n\n\tfunction getFirstTouchEvent( event ) {\n\t\t'worklet';\n\n\t\treturn event.allTouches.find(\n\t\t\t( touch ) => touch.id === currentFirstTouchId.value\n\t\t);\n\t}\n\n\tconst panGesture = Gesture.Pan()\n\t\t.manualActivation( true )\n\t\t.onTouchesDown( ( event ) => {\n\t\t\tif ( ! currentFirstTouchId.value ) {\n\t\t\t\tconst firstEvent = event.allTouches[ 0 ];\n\t\t\t\tconst { x = 0, y = 0 } = firstEvent;\n\n\t\t\t\tcurrentFirstTouchId.value = firstEvent.id;\n\n\t\t\t\tinitialPosition.x.value = x;\n\t\t\t\tinitialPosition.y.value = y;\n\t\t\t}\n\t\t} )\n\t\t.onTouchesMove( ( event, state ) => {\n\t\t\tif ( ! isPanActive.value && isDragging.value ) {\n\t\t\t\tisPanActive.value = true;\n\t\t\t\tstate.activate();\n\t\t\t}\n\n\t\t\tif ( isPanActive.value && isDragging.value ) {\n\t\t\t\tconst firstEvent = getFirstTouchEvent( event );\n\n\t\t\t\tif ( ! firstEvent ) {\n\t\t\t\t\tstate.end();\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tlastPosition.x.value = firstEvent.x;\n\t\t\t\tlastPosition.y.value = firstEvent.y;\n\n\t\t\t\tif ( onDragOver ) {\n\t\t\t\t\tonDragOver( firstEvent );\n\t\t\t\t}\n\t\t\t}\n\t\t} )\n\t\t.onTouchesCancelled( ( _event, state ) => {\n\t\t\tstate.end();\n\t\t} )\n\t\t.onEnd( () => {\n\t\t\tcurrentFirstTouchId.value = null;\n\t\t\tisPanActive.value = false;\n\t\t\tisDragging.value = false;\n\t\t} )\n\t\t.withRef( panGestureRef )\n\t\t.shouldCancelWhenOutside( false )\n\t\t.withTestId( testID );\n\n\tconst providerValue = useMemo( () => {\n\t\treturn { panGestureRef, isDragging, isPanActive, draggingId };\n\t}, [\n\t\t// `isDragging`, `isPanActive` and `draggingId` are created using the\n\t\t// `useSharedValue` hook provided by the `react-native-reanimated`, which in\n\t\t// theory should guarantee that the value of these variables remains stable.\n\t\t// ESLint can't pick this up, and that's why they have to be specified as\n\t\t// dependencies for this hook call.\n\t\tisDragging,\n\t\tisPanActive,\n\t\tdraggingId,\n\t] );\n\n\treturn (\n\t\t<GestureDetector gesture={ panGesture }>\n\t\t\t<Animated.View style={ styles.draggable__container }>\n\t\t\t\t<Provider value={ providerValue }>{ children }</Provider>\n\t\t\t</Animated.View>\n\t\t</GestureDetector>\n\t);\n};\n\n/**\n * Draggable trigger component.\n *\n * This component acts as the trigger for the dragging functionality.\n *\n * @param {Object}      props                  Component props.\n * @param {JSX.Element} props.children         Children to be rendered.\n * @param {*}           props.id               Identifier passed within the event callbacks.\n * @param {boolean}     [props.enabled]        Enables the long-press gesture.\n * @param {number}      [props.maxDistance]    Maximum distance, that defines how far the finger is allowed to travel during a long press gesture.\n * @param {number}      [props.minDuration]    Minimum time, that a finger must remain pressed on the corresponding view.\n * @param {Function}    [props.onLongPress]    Callback when long-press gesture is triggered over an element.\n * @param {Function}    [props.onLongPressEnd] Callback when long-press gesture ends.\n * @param {string}      [props.testID]         Id used for querying the long-press gesture handler in tests.\n *\n * @return {JSX.Element} The component to be rendered.\n */\nconst DraggableTrigger = ( {\n\tchildren,\n\tenabled = true,\n\tid,\n\tmaxDistance = 1000,\n\tminDuration = 500,\n\tonLongPress,\n\tonLongPressEnd,\n\ttestID,\n} ) => {\n\tconst { panGestureRef, isDragging, isPanActive, draggingId } =\n\t\tuseContext( Context );\n\n\tconst gestureHandler = useAnimatedGestureHandler( {\n\t\tonActive: () => {\n\t\t\tif ( isDragging.value ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tdraggingId.value = id;\n\t\t\tisDragging.value = true;\n\t\t\tif ( onLongPress ) {\n\t\t\t\trunOnJS( onLongPress )( id );\n\t\t\t}\n\t\t},\n\t\tonEnd: () => {\n\t\t\tif ( ! isPanActive.value ) {\n\t\t\t\tisDragging.value = false;\n\t\t\t}\n\n\t\t\tif ( onLongPressEnd ) {\n\t\t\t\trunOnJS( onLongPressEnd )( id );\n\t\t\t}\n\t\t},\n\t} );\n\n\treturn (\n\t\t<LongPressGestureHandler\n\t\t\tenabled={ enabled }\n\t\t\tminDurationMs={ minDuration }\n\t\t\tmaxDist={ maxDistance }\n\t\t\tsimultaneousHandlers={ panGestureRef }\n\t\t\tshouldCancelWhenOutside={ false }\n\t\t\tonGestureEvent={ gestureHandler }\n\t\t\ttestID={ testID }\n\t\t>\n\t\t\t{ children }\n\t\t</LongPressGestureHandler>\n\t);\n};\n\nexport { DraggableTrigger };\nexport default Draggable;\n"]}