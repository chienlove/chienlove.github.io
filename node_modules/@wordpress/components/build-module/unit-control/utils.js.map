{"version":3,"sources":["@wordpress/components/src/unit-control/utils.ts"],"names":["__","_x","Platform","isWeb","OS","allUnits","px","value","label","a11yLabel","step","em","rem","vw","vh","vmin","vmax","ch","ex","cm","mm","in","pc","pt","ALL_CSS_UNITS","Object","values","CSS_UNITS","DEFAULT_UNIT","getParsedQuantityAndUnit","rawValue","fallbackUnit","allowedUnits","initialValue","parseQuantityAndUnitFromRawValue","hasUnits","units","Array","isArray","length","trimmedValue","quantityToReturn","trim","parsedQuantity","parseFloat","isFinite","undefined","unitMatch","match","matchedUnit","toLowerCase","unitToReturn","find","item","getValidParsedQuantityAndUnit","fallbackQuantity","parsedUnit","getAccessibleLabelForUnit","unit","filterUnitsWithSettings","allowedUnitValues","availableUnits","filter","includes","useCustomUnits","defaultValues","customUnitsToReturn","forEach","i","parsedDefaultValue","default","getUnitsWithCurrentUnit","legacyUnit","unitsToReturn","currentUnit","some","unshift"],"mappings":"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","sourcesContent":["/**\n * WordPress dependencies\n */\nimport { __, _x } from '@wordpress/i18n';\nimport { Platform } from '@wordpress/element';\n\n/**\n * Internal dependencies\n */\nimport type { WPUnitControlUnit } from './types';\n\nconst isWeb = Platform.OS === 'web';\n\nconst allUnits: Record< string, WPUnitControlUnit > = {\n\tpx: {\n\t\tvalue: 'px',\n\t\tlabel: isWeb ? 'px' : __( 'Pixels (px)' ),\n\t\ta11yLabel: __( 'Pixels (px)' ),\n\t\tstep: 1,\n\t},\n\t'%': {\n\t\tvalue: '%',\n\t\tlabel: isWeb ? '%' : __( 'Percentage (%)' ),\n\t\ta11yLabel: __( 'Percent (%)' ),\n\t\tstep: 0.1,\n\t},\n\tem: {\n\t\tvalue: 'em',\n\t\tlabel: isWeb ? 'em' : __( 'Relative to parent font size (em)' ),\n\t\ta11yLabel: _x( 'ems', 'Relative to parent font size (em)' ),\n\t\tstep: 0.01,\n\t},\n\trem: {\n\t\tvalue: 'rem',\n\t\tlabel: isWeb ? 'rem' : __( 'Relative to root font size (rem)' ),\n\t\ta11yLabel: _x( 'rems', 'Relative to root font size (rem)' ),\n\t\tstep: 0.01,\n\t},\n\tvw: {\n\t\tvalue: 'vw',\n\t\tlabel: isWeb ? 'vw' : __( 'Viewport width (vw)' ),\n\t\ta11yLabel: __( 'Viewport width (vw)' ),\n\t\tstep: 0.1,\n\t},\n\tvh: {\n\t\tvalue: 'vh',\n\t\tlabel: isWeb ? 'vh' : __( 'Viewport height (vh)' ),\n\t\ta11yLabel: __( 'Viewport height (vh)' ),\n\t\tstep: 0.1,\n\t},\n\tvmin: {\n\t\tvalue: 'vmin',\n\t\tlabel: isWeb ? 'vmin' : __( 'Viewport smallest dimension (vmin)' ),\n\t\ta11yLabel: __( 'Viewport smallest dimension (vmin)' ),\n\t\tstep: 0.1,\n\t},\n\tvmax: {\n\t\tvalue: 'vmax',\n\t\tlabel: isWeb ? 'vmax' : __( 'Viewport largest dimension (vmax)' ),\n\t\ta11yLabel: __( 'Viewport largest dimension (vmax)' ),\n\t\tstep: 0.1,\n\t},\n\tch: {\n\t\tvalue: 'ch',\n\t\tlabel: isWeb ? 'ch' : __( 'Width of the zero (0) character (ch)' ),\n\t\ta11yLabel: __( 'Width of the zero (0) character (ch)' ),\n\t\tstep: 0.01,\n\t},\n\tex: {\n\t\tvalue: 'ex',\n\t\tlabel: isWeb ? 'ex' : __( 'x-height of the font (ex)' ),\n\t\ta11yLabel: __( 'x-height of the font (ex)' ),\n\t\tstep: 0.01,\n\t},\n\tcm: {\n\t\tvalue: 'cm',\n\t\tlabel: isWeb ? 'cm' : __( 'Centimeters (cm)' ),\n\t\ta11yLabel: __( 'Centimeters (cm)' ),\n\t\tstep: 0.001,\n\t},\n\tmm: {\n\t\tvalue: 'mm',\n\t\tlabel: isWeb ? 'mm' : __( 'Millimeters (mm)' ),\n\t\ta11yLabel: __( 'Millimeters (mm)' ),\n\t\tstep: 0.1,\n\t},\n\tin: {\n\t\tvalue: 'in',\n\t\tlabel: isWeb ? 'in' : __( 'Inches (in)' ),\n\t\ta11yLabel: __( 'Inches (in)' ),\n\t\tstep: 0.001,\n\t},\n\tpc: {\n\t\tvalue: 'pc',\n\t\tlabel: isWeb ? 'pc' : __( 'Picas (pc)' ),\n\t\ta11yLabel: __( 'Picas (pc)' ),\n\t\tstep: 1,\n\t},\n\tpt: {\n\t\tvalue: 'pt',\n\t\tlabel: isWeb ? 'pt' : __( 'Points (pt)' ),\n\t\ta11yLabel: __( 'Points (pt)' ),\n\t\tstep: 1,\n\t},\n};\n\n/**\n * An array of all available CSS length units.\n */\nexport const ALL_CSS_UNITS = Object.values( allUnits );\n\n/**\n * Units of measurements. `a11yLabel` is used by screenreaders.\n */\nexport const CSS_UNITS = [\n\tallUnits.px,\n\tallUnits[ '%' ],\n\tallUnits.em,\n\tallUnits.rem,\n\tallUnits.vw,\n\tallUnits.vh,\n];\n\nexport const DEFAULT_UNIT = allUnits.px;\n\n/**\n * Handles legacy value + unit handling.\n * This component use to manage both incoming value and units separately.\n *\n * Moving forward, ideally the value should be a string that contains both\n * the value and unit, example: '10px'\n *\n * @param rawValue     The raw value as a string (may or may not contain the unit)\n * @param fallbackUnit The unit used as a fallback, if not unit is detected in the `value`\n * @param allowedUnits Units to derive from.\n * @return The extracted quantity and unit. The quantity can be `undefined` in case the raw value\n * could not be parsed to a number correctly. The unit can be `undefined` in case the unit parse\n * from the raw value could not be matched against the list of allowed units.\n */\nexport function getParsedQuantityAndUnit(\n\trawValue?: string | number,\n\tfallbackUnit?: string,\n\tallowedUnits?: WPUnitControlUnit[]\n): [ number | undefined, string | undefined ] {\n\tconst initialValue = fallbackUnit\n\t\t? `${ rawValue ?? '' }${ fallbackUnit }`\n\t\t: rawValue;\n\n\treturn parseQuantityAndUnitFromRawValue( initialValue, allowedUnits );\n}\n\n/**\n * Checks if units are defined.\n *\n * @param units List of units.\n * @return Whether the list actually contains any units.\n */\nexport function hasUnits(\n\tunits?: WPUnitControlUnit[]\n): units is WPUnitControlUnit[] {\n\t// Although the `isArray` check shouldn't be necessary (given the signature of\n\t// this typed function), it's better to stay on the side of caution, since\n\t// this function may be called from un-typed environments.\n\treturn Array.isArray( units ) && !! units.length;\n}\n\n/**\n * Parses a quantity and unit from a raw string value, given a list of allowed\n * units and otherwise falling back to the default unit.\n *\n * @param rawValue     The raw value as a string (may or may not contain the unit)\n * @param allowedUnits Units to derive from.\n * @return The extracted quantity and unit. The quantity can be `undefined` in case the raw value\n * could not be parsed to a number correctly. The unit can be `undefined` in case the unit parsed\n * from the raw value could not be matched against the list of allowed units.\n */\nexport function parseQuantityAndUnitFromRawValue(\n\trawValue?: string | number,\n\tallowedUnits: WPUnitControlUnit[] = ALL_CSS_UNITS\n): [ number | undefined, string | undefined ] {\n\tlet trimmedValue;\n\tlet quantityToReturn;\n\n\tif ( typeof rawValue !== 'undefined' || rawValue === null ) {\n\t\ttrimmedValue = `${ rawValue }`.trim();\n\t\tconst parsedQuantity = parseFloat( trimmedValue );\n\t\tquantityToReturn = ! isFinite( parsedQuantity )\n\t\t\t? undefined\n\t\t\t: parsedQuantity;\n\t}\n\n\tconst unitMatch = trimmedValue?.match( /[\\d.\\-\\+]*\\s*(.*)/ );\n\tconst matchedUnit = unitMatch?.[ 1 ]?.toLowerCase();\n\tlet unitToReturn: string | undefined;\n\tif ( hasUnits( allowedUnits ) ) {\n\t\tconst match = allowedUnits.find(\n\t\t\t( item ) => item.value === matchedUnit\n\t\t);\n\t\tunitToReturn = match?.value;\n\t} else {\n\t\tunitToReturn = DEFAULT_UNIT.value;\n\t}\n\n\treturn [ quantityToReturn, unitToReturn ];\n}\n\n/**\n * Parses quantity and unit from a raw value. Validates parsed value, using fallback\n * value if invalid.\n *\n * @param rawValue         The next value.\n * @param allowedUnits     Units to derive from.\n * @param fallbackQuantity The fallback quantity, used in case it's not possible to parse a valid quantity from the raw value.\n * @param fallbackUnit     The fallback unit, used in case it's not possible to parse a valid unit from the raw value.\n * @return The extracted quantity and unit. The quantity can be `undefined` in case the raw value\n * could not be parsed to a number correctly, and the `fallbackQuantity` was also `undefined`. The\n * unit can be `undefined` only if the unit parsed from the raw value could not be matched against\n * the list of allowed units, the `fallbackQuantity` is also `undefined` and the list of\n * `allowedUnits` is passed empty.\n */\nexport function getValidParsedQuantityAndUnit(\n\trawValue: string | number,\n\tallowedUnits?: WPUnitControlUnit[],\n\tfallbackQuantity?: number,\n\tfallbackUnit?: string\n): [ number | undefined, string | undefined ] {\n\tconst [ parsedQuantity, parsedUnit ] = parseQuantityAndUnitFromRawValue(\n\t\trawValue,\n\t\tallowedUnits\n\t);\n\n\t// The parsed value from `parseQuantityAndUnitFromRawValue` should now be\n\t// either a real number or undefined. If undefined, use the fallback value.\n\tconst quantityToReturn = parsedQuantity ?? fallbackQuantity;\n\n\t// If no unit is parsed from the raw value, or if the fallback unit is not\n\t// defined, use the first value from the list of allowed units as fallback.\n\tlet unitToReturn = parsedUnit || fallbackUnit;\n\n\tif ( ! unitToReturn && hasUnits( allowedUnits ) ) {\n\t\tunitToReturn = allowedUnits[ 0 ].value;\n\t}\n\n\treturn [ quantityToReturn, unitToReturn ];\n}\n\n/**\n * Takes a unit value and finds the matching accessibility label for the\n * unit abbreviation.\n *\n * @param unit Unit value (example: `px`)\n * @return a11y label for the unit abbreviation\n */\nexport function getAccessibleLabelForUnit( unit: string ): string | undefined {\n\tconst match = ALL_CSS_UNITS.find( ( item ) => item.value === unit );\n\treturn match?.a11yLabel ? match?.a11yLabel : match?.value;\n}\n\n/**\n * Filters available units based on values defined a list of allowed unit values.\n *\n * @param allowedUnitValues Collection of allowed unit value strings.\n * @param availableUnits    Collection of available unit objects.\n * @return Filtered units.\n */\nexport function filterUnitsWithSettings(\n\tallowedUnitValues: string[] = [],\n\tavailableUnits: WPUnitControlUnit[]\n): WPUnitControlUnit[] {\n\t// Although the `isArray` check shouldn't be necessary (given the signature of\n\t// this typed function), it's better to stay on the side of caution, since\n\t// this function may be called from un-typed environments.\n\treturn Array.isArray( availableUnits )\n\t\t? availableUnits.filter( ( unit ) =>\n\t\t\t\tallowedUnitValues.includes( unit.value )\n\t\t  )\n\t\t: [];\n}\n\n/**\n * Custom hook to retrieve and consolidate units setting from add_theme_support().\n * TODO: ideally this hook shouldn't be needed\n * https://github.com/WordPress/gutenberg/pull/31822#discussion_r633280823\n *\n * @param args                An object containing units, settingPath & defaultUnits.\n * @param args.units          Collection of all potentially available units.\n * @param args.availableUnits Collection of unit value strings for filtering available units.\n * @param args.defaultValues  Collection of default values for defined units. Example: `{ px: 350, em: 15 }`.\n *\n * @return Filtered list of units, with their default values updated following the `defaultValues`\n * argument's property.\n */\nexport const useCustomUnits = ( {\n\tunits = ALL_CSS_UNITS,\n\tavailableUnits = [],\n\tdefaultValues,\n}: {\n\tunits?: WPUnitControlUnit[];\n\tavailableUnits?: string[];\n\tdefaultValues?: Record< string, number >;\n} ): WPUnitControlUnit[] => {\n\tconst customUnitsToReturn = filterUnitsWithSettings(\n\t\tavailableUnits,\n\t\tunits\n\t);\n\n\tif ( defaultValues ) {\n\t\tcustomUnitsToReturn.forEach( ( unit, i ) => {\n\t\t\tif ( defaultValues[ unit.value ] ) {\n\t\t\t\tconst [ parsedDefaultValue ] = parseQuantityAndUnitFromRawValue(\n\t\t\t\t\tdefaultValues[ unit.value ]\n\t\t\t\t);\n\n\t\t\t\tcustomUnitsToReturn[ i ].default = parsedDefaultValue;\n\t\t\t}\n\t\t} );\n\t}\n\n\treturn customUnitsToReturn;\n};\n\n/**\n * Get available units with the unit for the currently selected value\n * prepended if it is not available in the list of units.\n *\n * This is useful to ensure that the current value's unit is always\n * accurately displayed in the UI, even if the intention is to hide\n * the availability of that unit.\n *\n * @param rawValue   Selected value to parse.\n * @param legacyUnit Legacy unit value, if rawValue needs it appended.\n * @param units      List of available units.\n *\n * @return A collection of units containing the unit for the current value.\n */\nexport function getUnitsWithCurrentUnit(\n\trawValue?: string | number,\n\tlegacyUnit?: string,\n\tunits: WPUnitControlUnit[] = ALL_CSS_UNITS\n): WPUnitControlUnit[] {\n\tconst unitsToReturn = Array.isArray( units ) ? [ ...units ] : [];\n\tconst [ , currentUnit ] = getParsedQuantityAndUnit(\n\t\trawValue,\n\t\tlegacyUnit,\n\t\tALL_CSS_UNITS\n\t);\n\n\tif (\n\t\tcurrentUnit &&\n\t\t! unitsToReturn.some( ( unit ) => unit.value === currentUnit )\n\t) {\n\t\tif ( allUnits[ currentUnit ] ) {\n\t\t\tunitsToReturn.unshift( allUnits[ currentUnit ] );\n\t\t}\n\t}\n\n\treturn unitsToReturn;\n}\n"]}