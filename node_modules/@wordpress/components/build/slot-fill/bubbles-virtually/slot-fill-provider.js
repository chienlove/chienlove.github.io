"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = SlotFillProvider;

var _element = require("@wordpress/element");

var _valtio = require("valtio");

var _utils = require("valtio/utils");

var _isShallowEqual = _interopRequireDefault(require("@wordpress/is-shallow-equal"));

var _slotFillContext = _interopRequireDefault(require("./slot-fill-context"));

// @ts-nocheck

/**
 * External dependencies
 */

/**
 * WordPress dependencies
 */

/**
 * Internal dependencies
 */
function useSlotRegistry() {
  const slots = (0, _element.useRef)((0, _utils.proxyMap)());
  const fills = (0, _element.useRef)((0, _utils.proxyMap)());
  const registerSlot = (0, _element.useCallback)((name, ref, fillProps) => {
    const slot = slots.current.get(name) || {};
    slots.current.set(name, (0, _valtio.ref)({ ...slot,
      ref: ref || slot.ref,
      fillProps: fillProps || slot.fillProps || {}
    }));
  }, []);
  const unregisterSlot = (0, _element.useCallback)((name, ref) => {
    var _slots$current$get;

    // Make sure we're not unregistering a slot registered by another element
    // See https://github.com/WordPress/gutenberg/pull/19242#issuecomment-590295412
    if (((_slots$current$get = slots.current.get(name)) === null || _slots$current$get === void 0 ? void 0 : _slots$current$get.ref) === ref) {
      slots.current.delete(name);
    }
  }, []);
  const updateSlot = (0, _element.useCallback)((name, fillProps) => {
    const slot = slots.current.get(name);

    if (!slot) {
      return;
    }

    if (!(0, _isShallowEqual.default)(slot.fillProps, fillProps)) {
      slot.fillProps = fillProps;
      const slotFills = fills.current.get(name);

      if (slotFills) {
        // Force update fills.
        slotFills.map(fill => fill.current.rerender());
      }
    }
  }, []);
  const registerFill = (0, _element.useCallback)((name, ref) => {
    fills.current.set(name, (0, _valtio.ref)([...(fills.current.get(name) || []), ref]));
  }, []);
  const unregisterFill = (0, _element.useCallback)((name, ref) => {
    if (fills.current.get(name)) {
      fills.current.set(name, (0, _valtio.ref)(fills.current.get(name).filter(fillRef => fillRef !== ref)));
    }
  }, []); // Memoizing the return value so it can be directly passed to Provider value

  const registry = (0, _element.useMemo)(() => ({
    slots: slots.current,
    fills: fills.current,
    registerSlot,
    updateSlot,
    unregisterSlot,
    registerFill,
    unregisterFill
  }), [registerSlot, updateSlot, unregisterSlot, registerFill, unregisterFill]);
  return registry;
}

function SlotFillProvider(_ref) {
  let {
    children
  } = _ref;
  const registry = useSlotRegistry();
  return (0, _element.createElement)(_slotFillContext.default.Provider, {
    value: registry
  }, children);
}
//# sourceMappingURL=slot-fill-provider.js.map