"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _element = require("@wordpress/element");

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _compose = require("@wordpress/compose");

var _slotFillContext = _interopRequireDefault(require("./slot-fill-context"));

// @ts-nocheck

/**
 * WordPress dependencies
 */

/**
 * Internal dependencies
 */
function Slot(_ref, forwardedRef) {
  let {
    name,
    fillProps = {},
    as: Component = 'div',
    ...props
  } = _ref;
  const {
    registerSlot,
    unregisterSlot,
    ...registry
  } = (0, _element.useContext)(_slotFillContext.default);
  const ref = (0, _element.useRef)();
  (0, _element.useLayoutEffect)(() => {
    registerSlot(name, ref, fillProps);
    return () => {
      unregisterSlot(name, ref);
    }; // Ignore reason: We don't want to unregister and register the slot whenever
    // `fillProps` change, which would cause the fill to be re-mounted. Instead,
    // we can just update the slot (see hook below).
    // For more context, see https://github.com/WordPress/gutenberg/pull/44403#discussion_r994415973
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [registerSlot, unregisterSlot, name]); // fillProps may be an update that interacts with the layout, so we
  // useLayoutEffect.

  (0, _element.useLayoutEffect)(() => {
    registry.updateSlot(name, fillProps);
  });
  return (0, _element.createElement)(Component, (0, _extends2.default)({
    ref: (0, _compose.useMergeRefs)([forwardedRef, ref])
  }, props));
}

var _default = (0, _element.forwardRef)(Slot);

exports.default = _default;
//# sourceMappingURL=slot.js.map