"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useControlLabel = useControlLabel;

var _context = require("../context");

var _formGroup = require("../form-group");

var _text = require("../../text");

var styles = _interopRequireWildcard(require("./styles"));

var _useCx = require("../../utils/hooks/use-cx");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * Internal dependencies
 */

/**
 * @param {import('../context').WordPressComponentProps<import('./types').Props, 'label', false>} props
 */
function useControlLabel(props) {
  const {
    htmlFor: htmlForProp,
    isBlock = false,
    size = 'medium',
    truncate = true,
    ...otherProps
  } = (0, _context.useContextSystem)(props, 'ControlLabel');
  const {
    className,
    ...textProps
  } = (0, _text.useText)({ ...otherProps,
    isBlock,
    truncate
  });
  const cx = (0, _useCx.useCx)();
  const htmlFor = (0, _formGroup.useFormGroupContextId)(htmlForProp);
  const classes = cx(styles.ControlLabel, styles[
  /** @type {'small' | 'medium' | 'large'} */
  size], className, isBlock ? styles.block : styles.inline);
  return { ...textProps,
    className: classes,
    htmlFor
  };
}
//# sourceMappingURL=hook.js.map