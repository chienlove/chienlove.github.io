"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useFormGroup = useFormGroup;

var _compose = require("@wordpress/compose");

var _context = require("../context");

var styles = _interopRequireWildcard(require("./form-group-styles"));

var _useCx = require("../../utils/hooks/use-cx");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * WordPress dependencies
 */

/**
 * Internal dependencies
 */

/**
 * @param {import('../context').WordPressComponentProps<import('./types').FormGroupProps, 'div'>} props
 */
function useFormGroup(props) {
  const {
    alignLabel = 'left',
    children,
    className,
    help,
    horizontal = false,
    id: idProp,
    label,
    labelHidden = false,
    truncate = false,
    ...otherProps
  } = (0, _context.useContextSystem)(props, 'FormGroup');
  const id = (0, _compose.useInstanceId)(useFormGroup, 'form-group', idProp);
  const cx = (0, _useCx.useCx)();
  const classes = cx(styles.FormGroup, className);
  const contentProps = {
    alignLabel,
    children,
    help,
    id,
    horizontal,
    label,
    labelHidden,
    truncate
  };
  return { ...otherProps,
    className: classes,
    contentProps,
    horizontal
  };
}
//# sourceMappingURL=use-form-group.js.map