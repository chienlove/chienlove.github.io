{"version":3,"sources":["@wordpress/components/src/mobile/readable-content-view/index.native.js"],"names":["PIXEL_RATIO","ReadableContentView","align","reversed","children","style","width","height","Dimensions","get","windowWidth","setWindowWidth","windowRatio","setWindowRatio","onDimensionsChange","window","dimensionsChangeSubscription","addEventListener","remove","getWideStyles","ALIGNMENT_BREAKPOINTS","large","styles","wideLandscape","small","maxWidth","medium","wide","wideMedium","container","reversedCenteredContent","centeredContent","WIDE_ALIGNMENTS","alignments","isContentMaxWidth"],"mappings":";;;;;;;;;AAQA;;AALA;;AAMA;;AAIA;;AAbA;AACA;AACA;;AAGA;AACA;AACA;;AAGA;AACA;AACA;AAGA,MAAMA,WAAW,GAAG,CAApB;;AAEA,MAAMC,mBAAmB,GAAG,QAA4C;AAAA,MAA1C;AAAEC,IAAAA,KAAF;AAASC,IAAAA,QAAT;AAAmBC,IAAAA,QAAnB;AAA6BC,IAAAA;AAA7B,GAA0C;;AACvE,QAAM;AAAEC,IAAAA,KAAF;AAASC,IAAAA;AAAT,MAAoBC,wBAAWC,GAAX,CAAgB,QAAhB,CAA1B;;AACA,QAAM,CAAEC,WAAF,EAAeC,cAAf,IAAkC,uBAAUL,KAAV,CAAxC;AACA,QAAM,CAAEM,WAAF,EAAeC,cAAf,IAAkC,uBAAUP,KAAK,GAAGC,MAAlB,CAAxC;;AAEA,WAASO,kBAAT,QAA0C;AAAA,QAAb;AAAEC,MAAAA;AAAF,KAAa;AACzCJ,IAAAA,cAAc,CAAEI,MAAM,CAACT,KAAT,CAAd;AACAO,IAAAA,cAAc,CAAEE,MAAM,CAACT,KAAP,GAAeS,MAAM,CAACR,MAAxB,CAAd;AACA;;AAED,0BAAW,MAAM;AAChB,UAAMS,4BAA4B,GAAGR,wBAAWS,gBAAX,CACpC,QADoC,EAEpCH,kBAFoC,CAArC;;AAKA,WAAO,MAAM;AACZE,MAAAA,4BAA4B,CAACE,MAA7B;AACA,KAFD;AAGA,GATD,EASG,EATH;;AAWA,WAASC,aAAT,GAAyB;AACxB,QACCP,WAAW,IAAIZ,WAAf,IACAU,WAAW,GAAGU,kCAAsBC,KAFrC,EAGE;AACD,aAAOC,eAAOC,aAAd;AACA;;AAED,QAAKb,WAAW,IAAIU,kCAAsBI,KAA1C,EAAkD;AACjD,aAAO;AAAEC,QAAAA,QAAQ,EAAEf;AAAZ,OAAP;AACA;;AAED,QACCA,WAAW,IAAIU,kCAAsBM,MAArC,IACAhB,WAAW,GAAGU,kCAAsBO,IAFrC,EAGE;AACD,aAAOL,eAAOM,UAAd;AACA;AACD;;AAED,SACC,4BAAC,iBAAD;AAAM,IAAA,KAAK,EAAGN,eAAOO;AAArB,KACC,4BAAC,iBAAD;AACC,IAAA,KAAK,EAAG,CACP1B,QAAQ,GACLmB,eAAOQ,uBADF,GAELR,eAAOS,eAHH,EAIP1B,KAJO,EAKPiB,eAAQpB,KAAR,CALO,EAMPA,KAAK,KAAK8B,4BAAgBC,UAAhB,CAA2BN,IAArC,IACCR,aAAa,EAPP;AADT,KAWGf,QAXH,CADD,CADD;AAiBA,CA1DD;;AA4DA,MAAM8B,iBAAiB,GAAG,MAAM;AAC/B,QAAM;AAAE5B,IAAAA;AAAF,MAAYE,wBAAWC,GAAX,CAAgB,QAAhB,CAAlB;;AACA,SAAOH,KAAK,GAAGgB,eAAOS,eAAP,CAAuBN,QAAtC;AACA,CAHD;;AAKAxB,mBAAmB,CAACiC,iBAApB,GAAwCA,iBAAxC;eAEejC,mB","sourcesContent":["/**\n * External dependencies\n */\nimport { View, Dimensions } from 'react-native';\n\n/**\n * WordPress dependencies\n */\nimport { useState, useEffect } from '@wordpress/element';\nimport { ALIGNMENT_BREAKPOINTS, WIDE_ALIGNMENTS } from '@wordpress/components';\n/**\n * Internal dependencies\n */\nimport styles from './style.scss';\n\nconst PIXEL_RATIO = 2;\n\nconst ReadableContentView = ( { align, reversed, children, style } ) => {\n\tconst { width, height } = Dimensions.get( 'window' );\n\tconst [ windowWidth, setWindowWidth ] = useState( width );\n\tconst [ windowRatio, setWindowRatio ] = useState( width / height );\n\n\tfunction onDimensionsChange( { window } ) {\n\t\tsetWindowWidth( window.width );\n\t\tsetWindowRatio( window.width / window.height );\n\t}\n\n\tuseEffect( () => {\n\t\tconst dimensionsChangeSubscription = Dimensions.addEventListener(\n\t\t\t'change',\n\t\t\tonDimensionsChange\n\t\t);\n\n\t\treturn () => {\n\t\t\tdimensionsChangeSubscription.remove();\n\t\t};\n\t}, [] );\n\n\tfunction getWideStyles() {\n\t\tif (\n\t\t\twindowRatio >= PIXEL_RATIO &&\n\t\t\twindowWidth < ALIGNMENT_BREAKPOINTS.large\n\t\t) {\n\t\t\treturn styles.wideLandscape;\n\t\t}\n\n\t\tif ( windowWidth <= ALIGNMENT_BREAKPOINTS.small ) {\n\t\t\treturn { maxWidth: windowWidth };\n\t\t}\n\n\t\tif (\n\t\t\twindowWidth >= ALIGNMENT_BREAKPOINTS.medium &&\n\t\t\twindowWidth < ALIGNMENT_BREAKPOINTS.wide\n\t\t) {\n\t\t\treturn styles.wideMedium;\n\t\t}\n\t}\n\n\treturn (\n\t\t<View style={ styles.container }>\n\t\t\t<View\n\t\t\t\tstyle={ [\n\t\t\t\t\treversed\n\t\t\t\t\t\t? styles.reversedCenteredContent\n\t\t\t\t\t\t: styles.centeredContent,\n\t\t\t\t\tstyle,\n\t\t\t\t\tstyles[ align ],\n\t\t\t\t\talign === WIDE_ALIGNMENTS.alignments.wide &&\n\t\t\t\t\t\tgetWideStyles(),\n\t\t\t\t] }\n\t\t\t>\n\t\t\t\t{ children }\n\t\t\t</View>\n\t\t</View>\n\t);\n};\n\nconst isContentMaxWidth = () => {\n\tconst { width } = Dimensions.get( 'window' );\n\treturn width > styles.centeredContent.maxWidth;\n};\n\nReadableContentView.isContentMaxWidth = isContentMaxWidth;\n\nexport default ReadableContentView;\n"]}