"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = Media;

var _element = require("@wordpress/element");

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _focalPointPickerStyle = require("./styles/focal-point-picker-style");

var _utils = require("./utils");

/**
 * External dependencies
 */

/**
 * Internal dependencies
 */
function Media(_ref) {
  let {
    alt,
    autoPlay,
    src,
    onLoad,
    mediaRef,
    // Exposing muted prop for test rendering purposes
    // https://github.com/testing-library/react-testing-library/issues/470
    muted = true,
    ...props
  } = _ref;

  if (!src) {
    return (0, _element.createElement)(_focalPointPickerStyle.MediaPlaceholder, (0, _extends2.default)({
      className: "components-focal-point-picker__media components-focal-point-picker__media--placeholder",
      ref: mediaRef
    }, props));
  }

  const isVideo = (0, _utils.isVideoType)(src);
  return isVideo ? (0, _element.createElement)("video", (0, _extends2.default)({}, props, {
    autoPlay: autoPlay,
    className: "components-focal-point-picker__media components-focal-point-picker__media--video",
    loop: true,
    muted: muted,
    onLoadedData: onLoad,
    ref: mediaRef,
    src: src
  })) : (0, _element.createElement)("img", (0, _extends2.default)({}, props, {
    alt: alt,
    className: "components-focal-point-picker__media components-focal-point-picker__media--image",
    onLoad: onLoad,
    ref: mediaRef,
    src: src
  }));
}
//# sourceMappingURL=media.js.map