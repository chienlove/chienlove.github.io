{"version":3,"sources":["@wordpress/components/src/utils/strings.ts"],"names":["ALL_UNICODE_DASH_CHARACTERS","RegExp","join","normalizeTextString","value","toLocaleLowerCase","replace","escapeRegExp","string"],"mappings":";;;;;;;;;;AAGA;;AAHA;AACA;AACA;AAGA,MAAMA,2BAA2B,GAAG,IAAIC,MAAJ,CAClC,IAAI,CACJ;AACA,QAFI,EAGJ;AACA,QAJI,EAKJ;AACA,QANI,EAOJ;AACA,QARI,EASJ;AACA,QAVI,EAWJ;AACA,QAZI,EAaJ;AACA,QAdI,EAeJ;AACA,QAhBI,EAiBJ;AACA,QAlBI,EAmBJ;AACA,QApBI,EAqBJ;AACA,QAtBI,EAuBJ;AACA,QAxBI,EAyBJ;AACA,QA1BI,EA2BJ;AACA,QA5BI,EA6BJ;AACA,QA9BI,EA+BJ;AACA,QAhCI,EAiCJ;AACA,QAlCI,EAmCJ;AACA,QApCI,EAqCJ;AACA,QAtCI,EAuCJ;AACA,QAxCI,EAyCJ;AACA,QA1CI,EA2CJ;AACA,QA5CI,EA6CJ;AACA,QA9CI,EA+CJ;AACA,QAhDI,EAiDJ;AACA,QAlDI,EAmDJ;AACA,QApDI,EAqDJ;AACA,QAtDI,EAuDJ;AACA,QAxDI,EAyDHC,IAzDG,CAyDG,EAzDH,CAyDS,GA1DqB,EA2DnC,GA3DmC,CAApC;;AA8DO,MAAMC,mBAAmB,GAAKC,KAAF,IAA6B;AAC/D,SAAO,4BAAeA,KAAf,EACLC,iBADK,GAELC,OAFK,CAEIN,2BAFJ,EAEiC,GAFjC,CAAP;AAGA,CAJM;AAMP;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AACO,SAASO,YAAT,CAAuBC,MAAvB,EAAgD;AACtD,SAAOA,MAAM,CAACF,OAAP,CAAgB,qBAAhB,EAAuC,MAAvC,CAAP;AACA","sourcesContent":["/**\n * External dependencies\n */\nimport removeAccents from 'remove-accents';\n\nconst ALL_UNICODE_DASH_CHARACTERS = new RegExp(\n\t`[${ [\n\t\t// - (hyphen-minus)\n\t\t'\\u002d',\n\t\t// ~ (tilde)\n\t\t'\\u007e',\n\t\t// ­ (soft hyphen)\n\t\t'\\u00ad',\n\t\t// ֊ (armenian hyphen)\n\t\t'\\u058a',\n\t\t// ־ (hebrew punctuation maqaf)\n\t\t'\\u05be',\n\t\t// ᐀ (canadian syllabics hyphen)\n\t\t'\\u1400',\n\t\t// ᠆ (mongolian todo soft hyphen)\n\t\t'\\u1806',\n\t\t// ‐ (hyphen)\n\t\t'\\u2010',\n\t\t// non-breaking hyphen)\n\t\t'\\u2011',\n\t\t// ‒ (figure dash)\n\t\t'\\u2012',\n\t\t// – (en dash)\n\t\t'\\u2013',\n\t\t// — (em dash)\n\t\t'\\u2014',\n\t\t// ― (horizontal bar)\n\t\t'\\u2015',\n\t\t// ⁓ (swung dash)\n\t\t'\\u2053',\n\t\t// superscript minus)\n\t\t'\\u207b',\n\t\t// subscript minus)\n\t\t'\\u208b',\n\t\t// − (minus sign)\n\t\t'\\u2212',\n\t\t// ⸗ (double oblique hyphen)\n\t\t'\\u2e17',\n\t\t// ⸺ (two-em dash)\n\t\t'\\u2e3a',\n\t\t// ⸻ (three-em dash)\n\t\t'\\u2e3b',\n\t\t// 〜 (wave dash)\n\t\t'\\u301c',\n\t\t// 〰 (wavy dash)\n\t\t'\\u3030',\n\t\t// ゠ (katakana-hiragana double hyphen)\n\t\t'\\u30a0',\n\t\t// ︱ (presentation form for vertical em dash)\n\t\t'\\ufe31',\n\t\t// ︲ (presentation form for vertical en dash)\n\t\t'\\ufe32',\n\t\t// ﹘ (small em dash)\n\t\t'\\ufe58',\n\t\t// ﹣ (small hyphen-minus)\n\t\t'\\ufe63',\n\t\t// － (fullwidth hyphen-minus)\n\t\t'\\uff0d',\n\t].join( '' ) }]`,\n\t'g'\n);\n\nexport const normalizeTextString = ( value: string ): string => {\n\treturn removeAccents( value )\n\t\t.toLocaleLowerCase()\n\t\t.replace( ALL_UNICODE_DASH_CHARACTERS, '-' );\n};\n\n/**\n * Escapes the RegExp special characters.\n *\n * @param {string} string Input string.\n *\n * @return {string} Regex-escaped string.\n */\nexport function escapeRegExp( string: string ): string {\n\treturn string.replace( /[\\\\^$.*+?()[\\]{}|]/g, '\\\\$&' );\n}\n"]}