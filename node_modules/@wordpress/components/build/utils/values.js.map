{"version":3,"sources":["@wordpress/components/src/utils/values.js"],"names":["isValueDefined","value","undefined","isValueEmpty","isEmptyString","getDefinedValue","values","fallbackValue","find","getDelimiterAndDecimalRegex","locale","formatted","Intl","NumberFormat","format","delimiter","decimal","length","RegExp","INTERNATIONAL_THOUSANDS_DELIMITER","ARABIC_NUMERAL_LOCALES","EASTERN_ARABIC_NUMBERS","isValueNumeric","window","navigator","language","some","l","startsWith","test","replace","d","indexOf","delimiterRegexp","decimalRegexp","valueToCheck","isNaN","parseFloat","isFinite","stringToNumber","numberToString","ensureNumber","ensureString"],"mappings":"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","sourcesContent":["/* eslint-disable jsdoc/valid-types */\n/**\n * Determines if a value is null or undefined.\n *\n * @template T\n *\n * @param {T} value The value to check.\n * @return {value is Exclude<T, null | undefined>} Whether value is not null or undefined.\n */\nexport function isValueDefined( value ) {\n\treturn value !== undefined && value !== null;\n}\n/* eslint-enable jsdoc/valid-types */\n\n/* eslint-disable jsdoc/valid-types */\n/**\n * Determines if a value is empty, null, or undefined.\n *\n * @param {string | number | null | undefined} value The value to check.\n * @return {value is (\"\" | null | undefined)} Whether value is empty.\n */\nexport function isValueEmpty( value ) {\n\tconst isEmptyString = value === '';\n\n\treturn ! isValueDefined( value ) || isEmptyString;\n}\n/* eslint-enable jsdoc/valid-types */\n\n/**\n * Get the first defined/non-null value from an array.\n *\n * @template T\n *\n * @param {Array<T | null | undefined>} values        Values to derive from.\n * @param {T}                           fallbackValue Fallback value if there are no defined values.\n * @return {T} A defined value or the fallback value.\n */\nexport function getDefinedValue( values = [], fallbackValue ) {\n\treturn values.find( isValueDefined ) ?? fallbackValue;\n}\n\n/**\n * @param {string} [locale]\n * @return {[RegExp, RegExp]} The delimiter and decimal regexp\n */\nconst getDelimiterAndDecimalRegex = ( locale ) => {\n\tconst formatted = Intl.NumberFormat( locale ).format( 1000.1 );\n\tconst delimiter = formatted[ 1 ];\n\tconst decimal = formatted[ formatted.length - 2 ];\n\treturn [\n\t\tnew RegExp( `\\\\${ delimiter }`, 'g' ),\n\t\tnew RegExp( `\\\\${ decimal }`, 'g' ),\n\t];\n};\n\n// https://en.wikipedia.org/wiki/Decimal_separator#Current_standards\nconst INTERNATIONAL_THOUSANDS_DELIMITER = / /g;\n\nconst ARABIC_NUMERAL_LOCALES = [ 'ar', 'fa', 'ur', 'ckb', 'ps' ];\n\nconst EASTERN_ARABIC_NUMBERS = /([۰-۹]|[٠-٩])/g;\n\n/**\n * Checks to see if a value is a numeric value (`number` or `string`).\n *\n * Intentionally ignores whether the thousands delimiters are only\n * in the thousands marks.\n *\n * @param {any}    value\n * @param {string} [locale]\n * @return {boolean} Whether value is numeric.\n */\nexport function isValueNumeric( value, locale = window.navigator.language ) {\n\tif ( ARABIC_NUMERAL_LOCALES.some( ( l ) => locale.startsWith( l ) ) ) {\n\t\tlocale = 'en-GB';\n\t\tif ( EASTERN_ARABIC_NUMBERS.test( value ) ) {\n\t\t\tvalue = value\n\t\t\t\t.replace( /[٠-٩]/g, ( /** @type {string} */ d ) =>\n\t\t\t\t\t'٠١٢٣٤٥٦٧٨٩'.indexOf( d )\n\t\t\t\t)\n\t\t\t\t.replace( /[۰-۹]/g, ( /** @type {string} */ d ) =>\n\t\t\t\t\t'۰۱۲۳۴۵۶۷۸۹'.indexOf( d )\n\t\t\t\t)\n\t\t\t\t.replace( /٬/g, ',' )\n\t\t\t\t.replace( /٫/g, '.' );\n\t\t}\n\t}\n\n\tconst [ delimiterRegexp, decimalRegexp ] =\n\t\tgetDelimiterAndDecimalRegex( locale );\n\tconst valueToCheck =\n\t\ttypeof value === 'string'\n\t\t\t? value\n\t\t\t\t\t.replace( delimiterRegexp, '' )\n\t\t\t\t\t.replace( decimalRegexp, '.' )\n\t\t\t\t\t.replace( INTERNATIONAL_THOUSANDS_DELIMITER, '' )\n\t\t\t: value;\n\treturn ! isNaN( parseFloat( valueToCheck ) ) && isFinite( valueToCheck );\n}\n\n/**\n * Converts a string to a number.\n *\n * @param {string} value\n * @return {number} String as a number.\n */\nexport const stringToNumber = ( value ) => {\n\treturn parseFloat( value );\n};\n\n/**\n * Converts a number to a string.\n *\n * @param {number} value\n * @return {string} Number as a string.\n */\nexport const numberToString = ( value ) => {\n\treturn `${ value }`;\n};\n\n/**\n * Regardless of the input being a string or a number, returns a number.\n *\n * Returns `undefined` in case the string is `undefined` or not a valid numeric value.\n *\n * @param {string | number} value\n * @return {number} The parsed number.\n */\nexport const ensureNumber = ( value ) => {\n\treturn typeof value === 'string' ? stringToNumber( value ) : value;\n};\n\n/**\n * Regardless of the input being a string or a number, returns a number.\n *\n * Returns `undefined` in case the string is `undefined` or not a valid numeric value.\n *\n * @param {string | number} value\n * @return {string} The converted string, or `undefined` in case the input is `undefined` or `NaN`.\n */\nexport const ensureString = ( value ) => {\n\treturn typeof value === 'string' ? value : numberToString( value );\n};\n"]}