"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "DatePicker", {
  enumerable: true,
  get: function () {
    return _date.default;
  }
});
exports.DateTimePicker = void 0;
Object.defineProperty(exports, "TimePicker", {
  enumerable: true,
  get: function () {
    return _time.default;
  }
});
exports.default = void 0;

var _element = require("@wordpress/element");

var _i18n = require("@wordpress/i18n");

var _deprecated = _interopRequireDefault(require("@wordpress/deprecated"));

var _button = _interopRequireDefault(require("../../button"));

var _date = _interopRequireDefault(require("../date"));

var _time = _interopRequireDefault(require("../time"));

var _styles = require("./styles");

var _hStack = require("../../h-stack");

var _heading = require("../../heading");

var _spacer = require("../../spacer");

/**
 * External dependencies
 */

/**
 * WordPress dependencies
 */

/**
 * Internal dependencies
 */
const noop = () => {};

function UnforwardedDateTimePicker(_ref, ref) {
  let {
    currentDate,
    is12Hour,
    isInvalidDate,
    onMonthPreviewed = noop,
    onChange,
    events,
    startOfWeek,
    __nextRemoveHelpButton = false,
    __nextRemoveResetButton = false
  } = _ref;

  if (!__nextRemoveHelpButton) {
    (0, _deprecated.default)('Help button in wp.components.DateTimePicker', {
      since: '13.4',
      version: '15.8',
      // One year of plugin releases.
      hint: 'Set the `__nextRemoveHelpButton` prop to `true` to remove this warning and opt in to the new behaviour, which will become the default in a future version.'
    });
  }

  if (!__nextRemoveResetButton) {
    (0, _deprecated.default)('Reset button in wp.components.DateTimePicker', {
      since: '13.4',
      version: '15.8',
      // One year of plugin releases.
      hint: 'Set the `__nextRemoveResetButton` prop to `true` to remove this warning and opt in to the new behaviour, which will become the default in a future version.'
    });
  }

  const [calendarHelpIsVisible, setCalendarHelpIsVisible] = (0, _element.useState)(false);

  function onClickDescriptionToggle() {
    setCalendarHelpIsVisible(!calendarHelpIsVisible);
  }

  return (0, _element.createElement)(_styles.Wrapper, {
    ref: ref,
    className: "components-datetime",
    spacing: 4
  }, !calendarHelpIsVisible && (0, _element.createElement)(_element.Fragment, null, (0, _element.createElement)(_time.default, {
    currentTime: currentDate,
    onChange: onChange,
    is12Hour: is12Hour
  }), (0, _element.createElement)(_date.default, {
    currentDate: currentDate,
    onChange: onChange,
    isInvalidDate: isInvalidDate,
    events: events,
    onMonthPreviewed: onMonthPreviewed,
    startOfWeek: startOfWeek
  })), calendarHelpIsVisible && (0, _element.createElement)(_styles.CalendarHelp, {
    className: "components-datetime__calendar-help" // Unused, for backwards compatibility.

  }, (0, _element.createElement)(_heading.Heading, {
    level: 4
  }, (0, _i18n.__)('Click to Select')), (0, _element.createElement)("ul", null, (0, _element.createElement)("li", null, (0, _i18n.__)('Click the right or left arrows to select other months in the past or the future.')), (0, _element.createElement)("li", null, (0, _i18n.__)('Click the desired day to select it.'))), (0, _element.createElement)(_heading.Heading, {
    level: 4
  }, (0, _i18n.__)('Navigating with a keyboard')), (0, _element.createElement)("ul", null, (0, _element.createElement)("li", null, (0, _element.createElement)("abbr", {
    "aria-label": (0, _i18n._x)('Enter', 'keyboard button')
  }, "\u21B5"), ' '
  /* JSX removes whitespace, but a space is required for screen readers. */
  , (0, _element.createElement)("span", null, (0, _i18n.__)('Select the date in focus.'))), (0, _element.createElement)("li", null, (0, _element.createElement)("abbr", {
    "aria-label": (0, _i18n.__)('Left and Right Arrows')
  }, "\u2190/\u2192"), ' '
  /* JSX removes whitespace, but a space is required for screen readers. */
  , (0, _i18n.__)('Move backward (left) or forward (right) by one day.')), (0, _element.createElement)("li", null, (0, _element.createElement)("abbr", {
    "aria-label": (0, _i18n.__)('Up and Down Arrows')
  }, "\u2191/\u2193"), ' '
  /* JSX removes whitespace, but a space is required for screen readers. */
  , (0, _i18n.__)('Move backward (up) or forward (down) by one week.')), (0, _element.createElement)("li", null, (0, _element.createElement)("abbr", {
    "aria-label": (0, _i18n.__)('Page Up and Page Down')
  }, (0, _i18n.__)('PgUp/PgDn')), ' '
  /* JSX removes whitespace, but a space is required for screen readers. */
  , (0, _i18n.__)('Move backward (PgUp) or forward (PgDn) by one month.')), (0, _element.createElement)("li", null, (0, _element.createElement)("abbr", {
    "aria-label": (0, _i18n.__)('Home and End')
  }, (0, _i18n.__)('Home/End')), ' '
  /* JSX removes whitespace, but a space is required for screen readers. */
  , (0, _i18n.__)('Go to the first (Home) or last (End) day of a week.')))), (!__nextRemoveResetButton || !__nextRemoveHelpButton) && (0, _element.createElement)(_hStack.HStack, {
    className: "components-datetime__buttons" // Unused, for backwards compatibility.

  }, !__nextRemoveResetButton && !calendarHelpIsVisible && currentDate && (0, _element.createElement)(_button.default, {
    className: "components-datetime__date-reset-button" // Unused, for backwards compatibility.
    ,
    variant: "link",
    onClick: () => onChange === null || onChange === void 0 ? void 0 : onChange(null)
  }, (0, _i18n.__)('Reset')), (0, _element.createElement)(_spacer.Spacer, null), !__nextRemoveHelpButton && (0, _element.createElement)(_button.default, {
    className: "components-datetime__date-help-toggle" // Unused, for backwards compatibility.
    ,
    variant: "link",
    onClick: onClickDescriptionToggle
  }, calendarHelpIsVisible ? (0, _i18n.__)('Close') : (0, _i18n.__)('Calendar Help'))));
}
/**
 * DateTimePicker is a React component that renders a calendar and clock for
 * date and time selection. The calendar and clock components can be accessed
 * individually using the `DatePicker` and `TimePicker` components respectively.
 *
 * ```jsx
 * import { DateTimePicker } from '@wordpress/components';
 * import { useState } from '@wordpress/element';
 *
 * const MyDateTimePicker = () => {
 *   const [ date, setDate ] = useState( new Date() );
 *
 *   return (
 *     <DateTimePicker
 *       currentDate={ date }
 *       onChange={ ( newDate ) => setDate( newDate ) }
 *       is12Hour
 *       __nextRemoveHelpButton
 *       __nextRemoveResetButton
 *     />
 *   );
 * };
 * ```
 */


const DateTimePicker = (0, _element.forwardRef)(UnforwardedDateTimePicker);
exports.DateTimePicker = DateTimePicker;
var _default = DateTimePicker;
exports.default = _default;
//# sourceMappingURL=index.js.map