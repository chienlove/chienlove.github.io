{"version":3,"sources":["@wordpress/components/src/h-stack/hook.tsx"],"names":["useHStack","props","alignment","children","direction","spacing","otherProps","align","validChildren","clonedChildren","map","child","index","_isSpacer","childElement","_key","key","propsForFlex","justify","gap","flexProps"],"mappings":";;;;;;;;;;;;;AAQA;;AAKA;;AACA;;AACA;;AAfA;AACA;AACA;;AAGA;AACA;AACA;AAWO,SAASA,SAAT,CAAoBC,KAApB,EAAqE;AAC3E,QAAM;AACLC,IAAAA,SAAS,GAAG,MADP;AAELC,IAAAA,QAFK;AAGLC,IAAAA,SAHK;AAILC,IAAAA,OAAO,GAAG,CAJL;AAKL,OAAGC;AALE,MAMF,+BAAkBL,KAAlB,EAAyB,QAAzB,CANJ;AAQA,QAAMM,KAAK,GAAG,8BAAmBL,SAAnB,EAA8BE,SAA9B,CAAd;AAEA,QAAMI,aAAa,GAAG,wCAAkBL,QAAlB,CAAtB;AACA,QAAMM,cAAc,GAAGD,aAAa,CAACE,GAAd,CAAmB,CAAEC,KAAF,EAASC,KAAT,KAAoB;AAC7D,UAAMC,SAAS,GAAG,kCAAqBF,KAArB,EAA4B,CAAE,QAAF,CAA5B,CAAlB;;AAEA,QAAKE,SAAL,EAAiB;AAChB,YAAMC,YAAY,GAAGH,KAArB;;AACA,YAAMI,IAAI,GAAGD,YAAY,CAACE,GAAb,IAAqB,UAAUJ,KAAO,EAAnD;;AAEA,aAAO,4BAAC,cAAD;AAAU,QAAA,OAAO,MAAjB;AAAkB,QAAA,GAAG,EAAGG;AAAxB,SAAoCD,YAAY,CAACb,KAAjD,EAAP;AACA;;AAED,WAAOU,KAAP;AACA,GAXsB,CAAvB;AAaA,QAAMM,YAAY,GAAG;AACpBd,IAAAA,QAAQ,EAAEM,cADU;AAEpBL,IAAAA,SAFoB;AAGpBc,IAAAA,OAAO,EAAE,QAHW;AAIpB,OAAGX,KAJiB;AAKpB,OAAGD,UALiB;AAMpBa,IAAAA,GAAG,EAAEd;AANe,GAArB;AASA,QAAMe,SAAS,GAAG,mBAASH,YAAT,CAAlB;AAEA,SAAOG,SAAP;AACA","sourcesContent":["/**\n * External dependencies\n */\nimport type { ReactElement } from 'react';\n\n/**\n * Internal dependencies\n */\nimport {\n\thasConnectNamespace,\n\tuseContextSystem,\n\tWordPressComponentProps,\n} from '../ui/context';\nimport { FlexItem, useFlex } from '../flex';\nimport { getAlignmentProps } from './utils';\nimport { getValidChildren } from '../ui/utils/get-valid-children';\nimport type { Props } from './types';\n\nexport function useHStack( props: WordPressComponentProps< Props, 'div' > ) {\n\tconst {\n\t\talignment = 'edge',\n\t\tchildren,\n\t\tdirection,\n\t\tspacing = 2,\n\t\t...otherProps\n\t} = useContextSystem( props, 'HStack' );\n\n\tconst align = getAlignmentProps( alignment, direction );\n\n\tconst validChildren = getValidChildren( children );\n\tconst clonedChildren = validChildren.map( ( child, index ) => {\n\t\tconst _isSpacer = hasConnectNamespace( child, [ 'Spacer' ] );\n\n\t\tif ( _isSpacer ) {\n\t\t\tconst childElement = child as ReactElement;\n\t\t\tconst _key = childElement.key || `hstack-${ index }`;\n\n\t\t\treturn <FlexItem isBlock key={ _key } { ...childElement.props } />;\n\t\t}\n\n\t\treturn child;\n\t} );\n\n\tconst propsForFlex = {\n\t\tchildren: clonedChildren,\n\t\tdirection,\n\t\tjustify: 'center',\n\t\t...align,\n\t\t...otherProps,\n\t\tgap: spacing,\n\t};\n\n\tconst flexProps = useFlex( propsForFlex );\n\n\treturn flexProps;\n}\n"]}