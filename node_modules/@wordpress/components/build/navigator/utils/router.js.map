{"version":3,"sources":["@wordpress/components/src/navigator/utils/router.ts"],"names":["matchPath","path","pattern","matchingFunction","decode","decodeURIComponent","patternMatch","screens","screen","matched","params","id","undefined","findParent","startsWith","pathParts","split","parentPath","length","pop","potentialParentPath","join","find"],"mappings":";;;;;;;;AAGA;;AAHA;AACA;AACA;AAQA,SAASA,SAAT,CAAoBC,IAApB,EAAkCC,OAAlC,EAAoD;AACnD,QAAMC,gBAAgB,GAAG,yBAAsBD,OAAtB,EAA+B;AACvDE,IAAAA,MAAM,EAAEC;AAD+C,GAA/B,CAAzB;AAGA,SAAOF,gBAAgB,CAAEF,IAAF,CAAvB;AACA;;AAEM,SAASK,YAAT,CAAuBL,IAAvB,EAAqCM,OAArC,EAAyD;AAC/D,OAAM,MAAMC,MAAZ,IAAsBD,OAAtB,EAAgC;AAC/B,UAAME,OAAO,GAAGT,SAAS,CAAEC,IAAF,EAAQO,MAAM,CAACP,IAAf,CAAzB;;AACA,QAAKQ,OAAL,EAAe;AACd,aAAO;AAAEC,QAAAA,MAAM,EAAED,OAAO,CAACC,MAAlB;AAA0BC,QAAAA,EAAE,EAAEH,MAAM,CAACG;AAArC,OAAP;AACA;AACD;;AAED,SAAOC,SAAP;AACA;;AAEM,SAASC,UAAT,CAAqBZ,IAArB,EAAmCM,OAAnC,EAAuD;AAC7D,MAAK,CAAEN,IAAI,CAACa,UAAL,CAAiB,GAAjB,CAAP,EAAgC;AAC/B,WAAOF,SAAP;AACA;;AACD,QAAMG,SAAS,GAAGd,IAAI,CAACe,KAAL,CAAY,GAAZ,CAAlB;AACA,MAAIC,UAAJ;;AACA,SAAQF,SAAS,CAACG,MAAV,GAAmB,CAAnB,IAAwBD,UAAU,KAAKL,SAA/C,EAA2D;AAC1DG,IAAAA,SAAS,CAACI,GAAV;AACA,UAAMC,mBAAmB,GACxBL,SAAS,CAACM,IAAV,CAAgB,GAAhB,MAA0B,EAA1B,GAA+B,GAA/B,GAAqCN,SAAS,CAACM,IAAV,CAAgB,GAAhB,CADtC;;AAEA,QACCd,OAAO,CAACe,IAAR,CAAgBd,MAAF,IAAc;AAC3B,aAAOR,SAAS,CAAEoB,mBAAF,EAAuBZ,MAAM,CAACP,IAA9B,CAAT,KAAkD,KAAzD;AACA,KAFD,CADD,EAIE;AACDgB,MAAAA,UAAU,GAAGG,mBAAb;AACA;AACD;;AAED,SAAOH,UAAP;AACA","sourcesContent":["/**\n * External dependencies\n */\nimport { match } from 'path-to-regexp';\n\n/**\n * Internal dependencies\n */\nimport type { Screen, MatchParams } from '../types';\n\nfunction matchPath( path: string, pattern: string ) {\n\tconst matchingFunction = match< MatchParams >( pattern, {\n\t\tdecode: decodeURIComponent,\n\t} );\n\treturn matchingFunction( path );\n}\n\nexport function patternMatch( path: string, screens: Screen[] ) {\n\tfor ( const screen of screens ) {\n\t\tconst matched = matchPath( path, screen.path );\n\t\tif ( matched ) {\n\t\t\treturn { params: matched.params, id: screen.id };\n\t\t}\n\t}\n\n\treturn undefined;\n}\n\nexport function findParent( path: string, screens: Screen[] ) {\n\tif ( ! path.startsWith( '/' ) ) {\n\t\treturn undefined;\n\t}\n\tconst pathParts = path.split( '/' );\n\tlet parentPath;\n\twhile ( pathParts.length > 1 && parentPath === undefined ) {\n\t\tpathParts.pop();\n\t\tconst potentialParentPath =\n\t\t\tpathParts.join( '/' ) === '' ? '/' : pathParts.join( '/' );\n\t\tif (\n\t\t\tscreens.find( ( screen ) => {\n\t\t\t\treturn matchPath( potentialParentPath, screen.path ) !== false;\n\t\t\t} )\n\t\t) {\n\t\t\tparentPath = potentialParentPath;\n\t\t}\n\t}\n\n\treturn parentPath;\n}\n"]}