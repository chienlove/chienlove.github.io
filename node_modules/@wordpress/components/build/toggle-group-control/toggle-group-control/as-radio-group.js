"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ToggleGroupControlAsRadioGroup = void 0;

var _element = require("@wordpress/element");

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _reakit = require("reakit");

var _compose = require("@wordpress/compose");

var _view = require("../../view");

var _toggleGroupControlBackdrop = _interopRequireDefault(require("./toggle-group-control-backdrop"));

var _context = _interopRequireDefault(require("../context"));

var _hooks = require("../../utils/hooks");

/**
 * External dependencies
 */
// eslint-disable-next-line no-restricted-imports

/**
 * WordPress dependencies
 */

/**
 * Internal dependencies
 */
function UnforwardedToggleGroupControlAsRadioGroup(_ref, forwardedRef) {
  let {
    children,
    isAdaptiveWidth,
    label,
    onChange,
    size,
    value,
    ...otherProps
  } = _ref;
  const containerRef = (0, _element.useRef)();
  const [resizeListener, sizes] = (0, _compose.useResizeObserver)();
  const baseId = (0, _compose.useInstanceId)(ToggleGroupControlAsRadioGroup, 'toggle-group-control-as-radio-group').toString();
  const radio = (0, _reakit.useRadioState)({
    baseId,
    state: value
  });
  const previousValue = (0, _compose.usePrevious)(value); // Propagate radio.state change.

  (0, _hooks.useUpdateEffect)(() => {
    // Avoid calling onChange if radio state changed
    // from incoming value.
    if (previousValue !== radio.state) {
      onChange(radio.state);
    }
  }, [radio.state]); // Sync incoming value with radio.state.

  (0, _hooks.useUpdateEffect)(() => {
    if (value !== radio.state) {
      radio.setState(value);
    }
  }, [value]);
  return (0, _element.createElement)(_context.default.Provider, {
    value: { ...radio,
      isBlock: !isAdaptiveWidth,
      size
    }
  }, (0, _element.createElement)(_reakit.RadioGroup, (0, _extends2.default)({}, radio, {
    "aria-label": label,
    as: _view.View
  }, otherProps, {
    ref: (0, _compose.useMergeRefs)([containerRef, forwardedRef])
  }), resizeListener, (0, _element.createElement)(_toggleGroupControlBackdrop.default, {
    state: radio.state,
    containerRef: containerRef,
    containerWidth: sizes.width,
    isAdaptiveWidth: isAdaptiveWidth
  }), children));
}

const ToggleGroupControlAsRadioGroup = (0, _element.forwardRef)(UnforwardedToggleGroupControlAsRadioGroup);
exports.ToggleGroupControlAsRadioGroup = ToggleGroupControlAsRadioGroup;
//# sourceMappingURL=as-radio-group.js.map