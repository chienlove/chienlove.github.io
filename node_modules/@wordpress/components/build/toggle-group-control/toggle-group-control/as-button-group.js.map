{"version":3,"sources":["@wordpress/components/src/toggle-group-control/toggle-group-control/as-button-group.tsx"],"names":["UnforwardedToggleGroupControlAsButtonGroup","forwardedRef","children","isAdaptiveWidth","label","onChange","size","value","otherProps","containerRef","resizeListener","sizes","baseId","ToggleGroupControlAsButtonGroup","toString","selectedValue","setSelectedValue","groupContext","state","setState","previousValue","isBlock","isDeselectable","width"],"mappings":";;;;;;;;;AAcA;;;;AANA;;AAWA;;AACA;;AACA;;AACA;;AAtBA;AACA;AACA;;AAGA;AACA;AACA;;AASA;AACA;AACA;AAQA,SAASA,0CAAT,OAcCC,YAdD,EAeE;AAAA,MAdD;AACCC,IAAAA,QADD;AAECC,IAAAA,eAFD;AAGCC,IAAAA,KAHD;AAICC,IAAAA,QAJD;AAKCC,IAAAA,IALD;AAMCC,IAAAA,KAND;AAOC,OAAGC;AAPJ,GAcC;AACD,QAAMC,YAAY,GAAG,sBAArB;AACA,QAAM,CAAEC,cAAF,EAAkBC,KAAlB,IAA4B,iCAAlC;AACA,QAAMC,MAAM,GAAG,4BACdC,+BADc,EAEd,sCAFc,EAGbC,QAHa,EAAf;AAIA,QAAM,CAAEC,aAAF,EAAiBC,gBAAjB,IAAsC,uBAAUT,KAAV,CAA5C;AACA,QAAMU,YAAY,GAAG;AACpBL,IAAAA,MADoB;AAEpBM,IAAAA,KAAK,EAAEH,aAFa;AAGpBI,IAAAA,QAAQ,EAAEH;AAHU,GAArB;AAKA,QAAMI,aAAa,GAAG,0BAAab,KAAb,CAAtB,CAbC,CAeD;;AACA,8BAAiB,MAAM;AACtB;AACA;AACA,QAAKa,aAAa,KAAKH,YAAY,CAACC,KAApC,EAA4C;AAC3Cb,MAAAA,QAAQ,CAAEY,YAAY,CAACC,KAAf,CAAR;AACA;AACD,GAND,EAMG,CAAED,YAAY,CAACC,KAAf,CANH,EAhBC,CAwBD;;AACA,8BAAiB,MAAM;AACtB,QAAKX,KAAK,KAAKU,YAAY,CAACC,KAA5B,EAAoC;AACnCD,MAAAA,YAAY,CAACE,QAAb,CAAuBZ,KAAvB;AACA;AACD,GAJD,EAIG,CAAEA,KAAF,CAJH;AAMA,SACC,4BAAC,gBAAD,CAA2B,QAA3B;AACC,IAAA,KAAK,EAAG,EACP,GAAGU,YADI;AAEPI,MAAAA,OAAO,EAAE,CAAElB,eAFJ;AAGPmB,MAAAA,cAAc,EAAE,IAHT;AAIPhB,MAAAA;AAJO;AADT,KAQC,4BAAC,UAAD;AACC,kBAAaF;AADd,KAEMI,UAFN;AAGC,IAAA,GAAG,EAAG,2BAAc,CAAEC,YAAF,EAAgBR,YAAhB,CAAd,CAHP;AAIC,IAAA,IAAI,EAAC;AAJN,MAMGS,cANH,EAOC,4BAAC,mCAAD;AACC,IAAA,KAAK,EAAGO,YAAY,CAACC,KADtB;AAEC,IAAA,YAAY,EAAGT,YAFhB;AAGC,IAAA,cAAc,EAAGE,KAAK,CAACY,KAHxB;AAIC,IAAA,eAAe,EAAGpB;AAJnB,IAPD,EAaGD,QAbH,CARD,CADD;AA0BA;;AAEM,MAAMW,+BAA+B,GAAG,yBAC9Cb,0CAD8C,CAAxC","sourcesContent":["/**\n * External dependencies\n */\nimport type { ForwardedRef } from 'react';\n\n/**\n * WordPress dependencies\n */\nimport {\n\tuseMergeRefs,\n\tuseInstanceId,\n\tusePrevious,\n\tuseResizeObserver,\n} from '@wordpress/compose';\nimport { forwardRef, useRef, useState } from '@wordpress/element';\n\n/**\n * Internal dependencies\n */\nimport { View } from '../../view';\nimport ToggleGroupControlBackdrop from './toggle-group-control-backdrop';\nimport ToggleGroupControlContext from '../context';\nimport { useUpdateEffect } from '../../utils/hooks';\nimport type { WordPressComponentProps } from '../../ui/context';\nimport type { ToggleGroupControlMainControlProps } from '../types';\n\nfunction UnforwardedToggleGroupControlAsButtonGroup(\n\t{\n\t\tchildren,\n\t\tisAdaptiveWidth,\n\t\tlabel,\n\t\tonChange,\n\t\tsize,\n\t\tvalue,\n\t\t...otherProps\n\t}: WordPressComponentProps<\n\t\tToggleGroupControlMainControlProps,\n\t\t'div',\n\t\tfalse\n\t>,\n\tforwardedRef: ForwardedRef< HTMLDivElement >\n) {\n\tconst containerRef = useRef();\n\tconst [ resizeListener, sizes ] = useResizeObserver();\n\tconst baseId = useInstanceId(\n\t\tToggleGroupControlAsButtonGroup,\n\t\t'toggle-group-control-as-button-group'\n\t).toString();\n\tconst [ selectedValue, setSelectedValue ] = useState( value );\n\tconst groupContext = {\n\t\tbaseId,\n\t\tstate: selectedValue,\n\t\tsetState: setSelectedValue,\n\t};\n\tconst previousValue = usePrevious( value );\n\n\t// Propagate groupContext.state change.\n\tuseUpdateEffect( () => {\n\t\t// Avoid calling onChange if groupContext state changed\n\t\t// from incoming value.\n\t\tif ( previousValue !== groupContext.state ) {\n\t\t\tonChange( groupContext.state );\n\t\t}\n\t}, [ groupContext.state ] );\n\n\t// Sync incoming value with groupContext.state.\n\tuseUpdateEffect( () => {\n\t\tif ( value !== groupContext.state ) {\n\t\t\tgroupContext.setState( value );\n\t\t}\n\t}, [ value ] );\n\n\treturn (\n\t\t<ToggleGroupControlContext.Provider\n\t\t\tvalue={ {\n\t\t\t\t...groupContext,\n\t\t\t\tisBlock: ! isAdaptiveWidth,\n\t\t\t\tisDeselectable: true,\n\t\t\t\tsize,\n\t\t\t} }\n\t\t>\n\t\t\t<View\n\t\t\t\taria-label={ label }\n\t\t\t\t{ ...otherProps }\n\t\t\t\tref={ useMergeRefs( [ containerRef, forwardedRef ] ) }\n\t\t\t\trole=\"group\"\n\t\t\t>\n\t\t\t\t{ resizeListener }\n\t\t\t\t<ToggleGroupControlBackdrop\n\t\t\t\t\tstate={ groupContext.state }\n\t\t\t\t\tcontainerRef={ containerRef }\n\t\t\t\t\tcontainerWidth={ sizes.width }\n\t\t\t\t\tisAdaptiveWidth={ isAdaptiveWidth }\n\t\t\t\t/>\n\t\t\t\t{ children }\n\t\t\t</View>\n\t\t</ToggleGroupControlContext.Provider>\n\t);\n}\n\nexport const ToggleGroupControlAsButtonGroup = forwardRef(\n\tUnforwardedToggleGroupControlAsButtonGroup\n);\n"]}