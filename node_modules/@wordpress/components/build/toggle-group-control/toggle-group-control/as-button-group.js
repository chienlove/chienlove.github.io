"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ToggleGroupControlAsButtonGroup = void 0;

var _element = require("@wordpress/element");

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _compose = require("@wordpress/compose");

var _view = require("../../view");

var _toggleGroupControlBackdrop = _interopRequireDefault(require("./toggle-group-control-backdrop"));

var _context = _interopRequireDefault(require("../context"));

var _hooks = require("../../utils/hooks");

/**
 * External dependencies
 */

/**
 * WordPress dependencies
 */

/**
 * Internal dependencies
 */
function UnforwardedToggleGroupControlAsButtonGroup(_ref, forwardedRef) {
  let {
    children,
    isAdaptiveWidth,
    label,
    onChange,
    size,
    value,
    ...otherProps
  } = _ref;
  const containerRef = (0, _element.useRef)();
  const [resizeListener, sizes] = (0, _compose.useResizeObserver)();
  const baseId = (0, _compose.useInstanceId)(ToggleGroupControlAsButtonGroup, 'toggle-group-control-as-button-group').toString();
  const [selectedValue, setSelectedValue] = (0, _element.useState)(value);
  const groupContext = {
    baseId,
    state: selectedValue,
    setState: setSelectedValue
  };
  const previousValue = (0, _compose.usePrevious)(value); // Propagate groupContext.state change.

  (0, _hooks.useUpdateEffect)(() => {
    // Avoid calling onChange if groupContext state changed
    // from incoming value.
    if (previousValue !== groupContext.state) {
      onChange(groupContext.state);
    }
  }, [groupContext.state]); // Sync incoming value with groupContext.state.

  (0, _hooks.useUpdateEffect)(() => {
    if (value !== groupContext.state) {
      groupContext.setState(value);
    }
  }, [value]);
  return (0, _element.createElement)(_context.default.Provider, {
    value: { ...groupContext,
      isBlock: !isAdaptiveWidth,
      isDeselectable: true,
      size
    }
  }, (0, _element.createElement)(_view.View, (0, _extends2.default)({
    "aria-label": label
  }, otherProps, {
    ref: (0, _compose.useMergeRefs)([containerRef, forwardedRef]),
    role: "group"
  }), resizeListener, (0, _element.createElement)(_toggleGroupControlBackdrop.default, {
    state: groupContext.state,
    containerRef: containerRef,
    containerWidth: sizes.width,
    isAdaptiveWidth: isAdaptiveWidth
  }), children));
}

const ToggleGroupControlAsButtonGroup = (0, _element.forwardRef)(UnforwardedToggleGroupControlAsButtonGroup);
exports.ToggleGroupControlAsButtonGroup = ToggleGroupControlAsButtonGroup;
//# sourceMappingURL=as-button-group.js.map