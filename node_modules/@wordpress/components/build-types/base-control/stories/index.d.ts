/// <reference types="react" />
/**
 * External dependencies
 */
import type { ComponentMeta, ComponentStory } from '@storybook/react';
/**
 * Internal dependencies
 */
import BaseControl from '..';
declare const meta: ComponentMeta<typeof BaseControl>;
export default meta;
export declare const Default: ComponentStory<typeof BaseControl>;
export declare const WithHelpText: ComponentStory<{
    ({ __nextHasNoMarginBottom, id, label, hideLabelFromVision, help, className, children, }: import("../types").BaseControlProps): JSX.Element;
    VisualLabel: ({ className, children, ...props }: import("../../ui/context").WordPressComponentProps<import("../types").BaseControlVisualLabelProps, "span", true>) => JSX.Element;
}>;
/**
 * `BaseControl.VisualLabel` is used to render a purely visual label inside a `BaseControl` component.
 *
 * It should only be used in cases where the children being rendered inside `BaseControl` are already accessibly labeled,
 * e.g., a button, but we want an additional visual label for that section equivalent to the labels `BaseControl` would
 * otherwise use if the `label` prop was passed.
 */
export declare const WithVisualLabel: ComponentStory<typeof BaseControl>;
//# sourceMappingURL=index.d.ts.map