/// <reference types="react" />
import type { ComponentMeta, ComponentStory } from '@storybook/react';
/**
 * Internal dependencies
 */
import ColorPalette from '..';
declare const meta: ComponentMeta<typeof ColorPalette>;
export default meta;
export declare const Default: ComponentStory<import("react").ForwardRefExoticComponent<Pick<{
    className?: string | undefined;
    clearColor: () => void;
    onChange: (newColor?: string | undefined, index?: number | undefined) => void;
    value?: string | undefined;
    actions?: import("react").ReactNode;
    headingLevel?: import("../../heading/types").HeadingSize | undefined;
}, "onChange"> & {
    clearable?: boolean | undefined;
    colors?: import("../types").ColorObject[] | import("../types").PaletteObject[] | undefined;
    disableCustomColors?: boolean | undefined;
    enableAlpha?: boolean | undefined;
    headingLevel?: import("../../heading/types").HeadingSize | undefined;
    value?: string | undefined;
    __experimentalIsRenderedInSidebar?: boolean | undefined;
} & Omit<Pick<import("react").DetailedHTMLProps<import("react").HTMLAttributes<HTMLDivElement>, HTMLDivElement>, "key" | keyof import("react").HTMLAttributes<HTMLDivElement>>, "onChange" | "value" | "children" | "as" | "headingLevel" | "colors" | "enableAlpha" | "__experimentalIsRenderedInSidebar" | "clearable" | "disableCustomColors"> & {
    as?: keyof JSX.IntrinsicElements | undefined;
} & import("react").RefAttributes<any>>>;
export declare const MultipleOrigins: ComponentStory<import("react").ForwardRefExoticComponent<Pick<{
    className?: string | undefined;
    clearColor: () => void;
    onChange: (newColor?: string | undefined, index?: number | undefined) => void;
    value?: string | undefined;
    actions?: import("react").ReactNode;
    headingLevel?: import("../../heading/types").HeadingSize | undefined;
}, "onChange"> & {
    clearable?: boolean | undefined;
    colors?: import("../types").ColorObject[] | import("../types").PaletteObject[] | undefined;
    disableCustomColors?: boolean | undefined;
    enableAlpha?: boolean | undefined;
    headingLevel?: import("../../heading/types").HeadingSize | undefined;
    value?: string | undefined;
    __experimentalIsRenderedInSidebar?: boolean | undefined;
} & Omit<Pick<import("react").DetailedHTMLProps<import("react").HTMLAttributes<HTMLDivElement>, HTMLDivElement>, "key" | keyof import("react").HTMLAttributes<HTMLDivElement>>, "onChange" | "value" | "children" | "as" | "headingLevel" | "colors" | "enableAlpha" | "__experimentalIsRenderedInSidebar" | "clearable" | "disableCustomColors"> & {
    as?: keyof JSX.IntrinsicElements | undefined;
} & import("react").RefAttributes<any>>>;
export declare const CSSVariables: ComponentStory<typeof ColorPalette>;
//# sourceMappingURL=index.d.ts.map