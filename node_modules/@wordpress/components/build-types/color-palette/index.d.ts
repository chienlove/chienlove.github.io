/// <reference types="react" />
import type { ColorObject, CustomColorPickerDropdownProps, PaletteObject } from './types';
export declare function CustomColorPickerDropdown({ isRenderedInSidebar, popoverProps: receivedPopoverProps, ...props }: CustomColorPickerDropdownProps): JSX.Element;
/**
 * Allows the user to pick a color from a list of pre-defined color entries.
 *
 * ```jsx
 * import { ColorPalette } from '@wordpress/components';
 * import { useState } from '@wordpress/element';
 *
 * const MyColorPalette = () => {
 *   const [ color, setColor ] = useState ( '#f00' )
 *   const colors = [
 *     { name: 'red', color: '#f00' },
 *     { name: 'white', color: '#fff' },
 *     { name: 'blue', color: '#00f' },
 *   ];
 *   return (
 *     <ColorPalette
 *       colors={ colors }
 *       value={ color }
 *       onChange={ ( color ) => setColor( color ) }
 *     />
 *   );
 * } );
 * ```
 */
export declare const ColorPalette: import("react").ForwardRefExoticComponent<Pick<{
    className?: string | undefined;
    clearColor: () => void;
    onChange: (newColor?: string | undefined, index?: number | undefined) => void;
    value?: string | undefined;
    actions?: import("react").ReactNode;
    headingLevel?: import("../heading/types").HeadingSize | undefined;
}, "onChange"> & {
    clearable?: boolean | undefined;
    colors?: ColorObject[] | PaletteObject[] | undefined;
    disableCustomColors?: boolean | undefined;
    enableAlpha?: boolean | undefined;
    headingLevel?: import("../heading/types").HeadingSize | undefined;
    value?: string | undefined;
    __experimentalIsRenderedInSidebar?: boolean | undefined;
} & Omit<Pick<import("react").DetailedHTMLProps<import("react").HTMLAttributes<HTMLDivElement>, HTMLDivElement>, "key" | keyof import("react").HTMLAttributes<HTMLDivElement>>, "onChange" | "value" | "children" | "as" | "headingLevel" | "colors" | "enableAlpha" | "__experimentalIsRenderedInSidebar" | "clearable" | "disableCustomColors"> & {
    as?: keyof JSX.IntrinsicElements | undefined;
} & import("react").RefAttributes<any>>;
export default ColorPalette;
//# sourceMappingURL=index.d.ts.map