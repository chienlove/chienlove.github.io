/// <reference types="react" />
/**
 * External dependencies
 */
import type { ComponentMeta, ComponentStory } from '@storybook/react';
/**
 * Internal dependencies
 */
import SearchControl from '..';
declare const meta: ComponentMeta<typeof SearchControl>;
export default meta;
export declare const Default: ComponentStory<import("react").ForwardRefExoticComponent<Pick<import("../../base-control/types").BaseControlProps, "help" | "label" | "__nextHasNoMarginBottom"> & {
    hideLabelFromVision?: boolean | undefined;
    onChange: (value: string) => void;
    onClose?: (() => void) | undefined;
    placeholder?: string | undefined;
    /**
     * When an `onClose` callback is provided, the search control will render a close button
     * that will trigger the given callback.
     *
     * Use this if you want the button to trigger your own logic to close the search field entirely,
     * rather than just clearing the input value.
     */
    value?: string | undefined;
} & Omit<Pick<import("react").DetailedHTMLProps<import("react").InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>, "key" | keyof import("react").InputHTMLAttributes<HTMLInputElement>>, "onChange" | "value" | "help" | "children" | "label" | "as" | "placeholder" | "onClose" | "hideLabelFromVision" | "__nextHasNoMarginBottom"> & import("react").RefAttributes<HTMLInputElement>>>;
/**
 * When an `onClose` callback is provided, the search control will render a close button
 * that will trigger the given callback.
 *
 * Use this if you want the button to trigger your own logic to close the search field entirely,
 * rather than just clearing the input value.
 */
export declare const WithOnClose: ComponentStory<import("react").ForwardRefExoticComponent<Pick<import("../../base-control/types").BaseControlProps, "help" | "label" | "__nextHasNoMarginBottom"> & {
    hideLabelFromVision?: boolean | undefined;
    onChange: (value: string) => void;
    onClose?: (() => void) | undefined;
    placeholder?: string | undefined;
    /**
     * When an `onClose` callback is provided, the search control will render a close button
     * that will trigger the given callback.
     *
     * Use this if you want the button to trigger your own logic to close the search field entirely,
     * rather than just clearing the input value.
     */
    value?: string | undefined;
} & Omit<Pick<import("react").DetailedHTMLProps<import("react").InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>, "key" | keyof import("react").InputHTMLAttributes<HTMLInputElement>>, "onChange" | "value" | "help" | "children" | "label" | "as" | "placeholder" | "onClose" | "hideLabelFromVision" | "__nextHasNoMarginBottom"> & import("react").RefAttributes<HTMLInputElement>>>;
//# sourceMappingURL=index.d.ts.map