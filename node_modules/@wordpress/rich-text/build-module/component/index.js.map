{"version":3,"names":["useRef","useLayoutEffect","useReducer","useMergeRefs","useRefEffect","useRegistry","create","RichTextData","apply","toHTMLString","useDefaultStyle","useBoundaryStyle","useEventListeners","useRichText","value","selectionStart","selectionEnd","placeholder","onSelectionChange","preserveWhiteSpace","onChange","__unstableDisableFormats","disableFormats","__unstableIsSelected","isSelected","__unstableDependencies","__unstableAfterParse","__unstableBeforeSerialize","__unstableAddInvisibleFormats","registry","forceRender","ref","createRecord","ownerDocument","defaultView","current","selection","getSelection","range","rangeCount","getRangeAt","element","__unstableIsEditableTree","applyRecord","newRecord","domOnly","prepareEditableTree","__unstableDomOnly","_value","record","setRecordFromProps","fromHTMLString","empty","text","formats","replacements","Array","length","start","end","hadSelectionUpdate","activeFormats","undefined","handleChange","newFormats","batch","__unstableFormats","__unstableText","applyFromProps","didMount","activeElement","focus","mergedRefs","getValue","__experimentalRichText"],"sources":["@wordpress/rich-text/src/component/index.js"],"sourcesContent":["/**\n * WordPress dependencies\n */\nimport { useRef, useLayoutEffect, useReducer } from '@wordpress/element';\nimport { useMergeRefs, useRefEffect } from '@wordpress/compose';\nimport { useRegistry } from '@wordpress/data';\n\n/**\n * Internal dependencies\n */\nimport { create, RichTextData } from '../create';\nimport { apply } from '../to-dom';\nimport { toHTMLString } from '../to-html-string';\nimport { useDefaultStyle } from './use-default-style';\nimport { useBoundaryStyle } from './use-boundary-style';\nimport { useEventListeners } from './event-listeners';\n\nexport function useRichText( {\n\tvalue = '',\n\tselectionStart,\n\tselectionEnd,\n\tplaceholder,\n\tonSelectionChange,\n\tpreserveWhiteSpace,\n\tonChange,\n\t__unstableDisableFormats: disableFormats,\n\t__unstableIsSelected: isSelected,\n\t__unstableDependencies = [],\n\t__unstableAfterParse,\n\t__unstableBeforeSerialize,\n\t__unstableAddInvisibleFormats,\n} ) {\n\tconst registry = useRegistry();\n\tconst [ , forceRender ] = useReducer( () => ( {} ) );\n\tconst ref = useRef();\n\n\tfunction createRecord() {\n\t\tconst {\n\t\t\townerDocument: { defaultView },\n\t\t} = ref.current;\n\t\tconst selection = defaultView.getSelection();\n\t\tconst range =\n\t\t\tselection.rangeCount > 0 ? selection.getRangeAt( 0 ) : null;\n\n\t\treturn create( {\n\t\t\telement: ref.current,\n\t\t\trange,\n\t\t\t__unstableIsEditableTree: true,\n\t\t} );\n\t}\n\n\tfunction applyRecord( newRecord, { domOnly } = {} ) {\n\t\tapply( {\n\t\t\tvalue: newRecord,\n\t\t\tcurrent: ref.current,\n\t\t\tprepareEditableTree: __unstableAddInvisibleFormats,\n\t\t\t__unstableDomOnly: domOnly,\n\t\t\tplaceholder,\n\t\t} );\n\t}\n\n\t// Internal values are updated synchronously, unlike props and state.\n\tconst _value = useRef( value );\n\tconst record = useRef();\n\n\tfunction setRecordFromProps() {\n\t\t_value.current = value;\n\t\trecord.current = value;\n\t\tif ( ! ( value instanceof RichTextData ) ) {\n\t\t\trecord.current = value\n\t\t\t\t? RichTextData.fromHTMLString( value, { preserveWhiteSpace } )\n\t\t\t\t: RichTextData.empty();\n\t\t}\n\t\t// To do: make rich text internally work with RichTextData.\n\t\trecord.current = {\n\t\t\ttext: record.current.text,\n\t\t\tformats: record.current.formats,\n\t\t\treplacements: record.current.replacements,\n\t\t};\n\t\tif ( disableFormats ) {\n\t\t\trecord.current.formats = Array( value.length );\n\t\t\trecord.current.replacements = Array( value.length );\n\t\t}\n\t\tif ( __unstableAfterParse ) {\n\t\t\trecord.current.formats = __unstableAfterParse( record.current );\n\t\t}\n\t\trecord.current.start = selectionStart;\n\t\trecord.current.end = selectionEnd;\n\t}\n\n\tconst hadSelectionUpdate = useRef( false );\n\n\tif ( ! record.current ) {\n\t\thadSelectionUpdate.current = isSelected;\n\t\tsetRecordFromProps();\n\t} else if (\n\t\tselectionStart !== record.current.start ||\n\t\tselectionEnd !== record.current.end\n\t) {\n\t\thadSelectionUpdate.current = isSelected;\n\t\trecord.current = {\n\t\t\t...record.current,\n\t\t\tstart: selectionStart,\n\t\t\tend: selectionEnd,\n\t\t\tactiveFormats: undefined,\n\t\t};\n\t}\n\n\t/**\n\t * Sync the value to global state. The node tree and selection will also be\n\t * updated if differences are found.\n\t *\n\t * @param {Object} newRecord The record to sync and apply.\n\t */\n\tfunction handleChange( newRecord ) {\n\t\trecord.current = newRecord;\n\t\tapplyRecord( newRecord );\n\n\t\tif ( disableFormats ) {\n\t\t\t_value.current = newRecord.text;\n\t\t} else {\n\t\t\tconst newFormats = __unstableBeforeSerialize\n\t\t\t\t? __unstableBeforeSerialize( newRecord )\n\t\t\t\t: newRecord.formats;\n\t\t\tnewRecord = { ...newRecord, formats: newFormats };\n\t\t\tif ( typeof value === 'string' ) {\n\t\t\t\t_value.current = toHTMLString( {\n\t\t\t\t\tvalue: newRecord,\n\t\t\t\t\tpreserveWhiteSpace,\n\t\t\t\t} );\n\t\t\t} else {\n\t\t\t\t_value.current = new RichTextData( newRecord );\n\t\t\t}\n\t\t}\n\n\t\tconst { start, end, formats, text } = record.current;\n\n\t\t// Selection must be updated first, so it is recorded in history when\n\t\t// the content change happens.\n\t\t// We batch both calls to only attempt to rerender once.\n\t\tregistry.batch( () => {\n\t\t\tonSelectionChange( start, end );\n\t\t\tonChange( _value.current, {\n\t\t\t\t__unstableFormats: formats,\n\t\t\t\t__unstableText: text,\n\t\t\t} );\n\t\t} );\n\t\tforceRender();\n\t}\n\n\tfunction applyFromProps() {\n\t\tsetRecordFromProps();\n\t\tapplyRecord( record.current );\n\t}\n\n\tconst didMount = useRef( false );\n\n\t// Value updates must happen synchonously to avoid overwriting newer values.\n\tuseLayoutEffect( () => {\n\t\tif ( didMount.current && value !== _value.current ) {\n\t\t\tapplyFromProps();\n\t\t\tforceRender();\n\t\t}\n\t}, [ value ] );\n\n\t// Value updates must happen synchonously to avoid overwriting newer values.\n\tuseLayoutEffect( () => {\n\t\tif ( ! hadSelectionUpdate.current ) {\n\t\t\treturn;\n\t\t}\n\n\t\tif ( ref.current.ownerDocument.activeElement !== ref.current ) {\n\t\t\tref.current.focus();\n\t\t}\n\n\t\tapplyRecord( record.current );\n\t\thadSelectionUpdate.current = false;\n\t}, [ hadSelectionUpdate.current ] );\n\n\tconst mergedRefs = useMergeRefs( [\n\t\tref,\n\t\tuseDefaultStyle(),\n\t\tuseBoundaryStyle( { record } ),\n\t\tuseEventListeners( {\n\t\t\trecord,\n\t\t\thandleChange,\n\t\t\tapplyRecord,\n\t\t\tcreateRecord,\n\t\t\tisSelected,\n\t\t\tonSelectionChange,\n\t\t\tforceRender,\n\t\t} ),\n\t\tuseRefEffect( () => {\n\t\t\tapplyFromProps();\n\t\t\tdidMount.current = true;\n\t\t}, [ placeholder, ...__unstableDependencies ] ),\n\t] );\n\n\treturn {\n\t\tvalue: record.current,\n\t\t// A function to get the most recent value so event handlers in\n\t\t// useRichText implementations have access to it. For example when\n\t\t// listening to input events, we internally update the state, but this\n\t\t// state is not yet available to the input event handler because React\n\t\t// may re-render asynchronously.\n\t\tgetValue: () => record.current,\n\t\tonChange: handleChange,\n\t\tref: mergedRefs,\n\t};\n}\n\nexport default function __experimentalRichText() {}\n"],"mappings":"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","ignoreList":[]}