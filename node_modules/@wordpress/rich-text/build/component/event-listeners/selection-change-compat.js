"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _isRangeEqual = require("../../is-range-equal");
/**
 * Internal dependencies
 */
/**
 * Sometimes some browsers are not firing a `selectionchange` event when
 * changing the selection by mouse or keyboard. This hook makes sure that, if we
 * detect no `selectionchange` or `input` event between the up and down events,
 * we fire a `selectionchange` event.
 */
var _default = () => element => {
  const {
    ownerDocument
  } = element;
  const {
    defaultView
  } = ownerDocument;
  const selection = defaultView?.getSelection();
  let range;
  function getRange() {
    return selection.rangeCount ? selection.getRangeAt(0) : null;
  }
  function onDown(event) {
    const type = event.type === 'keydown' ? 'keyup' : 'pointerup';
    function onCancel() {
      ownerDocument.removeEventListener(type, onUp);
      ownerDocument.removeEventListener('selectionchange', onCancel);
      ownerDocument.removeEventListener('input', onCancel);
    }
    function onUp() {
      onCancel();
      if ((0, _isRangeEqual.isRangeEqual)(range, getRange())) {
        return;
      }
      ownerDocument.dispatchEvent(new Event('selectionchange'));
    }
    ownerDocument.addEventListener(type, onUp);
    ownerDocument.addEventListener('selectionchange', onCancel);
    ownerDocument.addEventListener('input', onCancel);
    range = getRange();
  }
  element.addEventListener('pointerdown', onDown);
  element.addEventListener('keydown', onDown);
  return () => {
    element.removeEventListener('pointerdown', onDown);
    element.removeEventListener('keydown', onDown);
  };
};
exports.default = _default;
//# sourceMappingURL=selection-change-compat.js.map