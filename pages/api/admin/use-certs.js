export const config = {
  api: {
    bodyParser: true, // ƒê·∫£m b·∫£o c√≥ th·ªÉ ƒë·ªçc JSON t·ª´ req.body
  },
};

import { createClient } from '@supabase/supabase-js';

const supabase = createClient(
  process.env.NEXT_PUBLIC_SUPABASE_URL,
  process.env.SUPABASE_SERVICE_ROLE_KEY
);

export default async function handler(req, res) {
  console.log("üì• [use-certs] METHOD:", req.method);

  if (req.method !== 'POST') {
    return res.status(405).json({ message: 'Method not allowed' });
  }

  try {
    const { name, tag, identifier } = req.body;
    console.log("üì¶ [use-certs] BODY:", { name, tag, identifier });

    if (!name || !tag || !identifier) {
      return res.status(400).json({ message: 'Thi·∫øu th√¥ng tin b·∫Øt bu·ªôc.' });
    }

    // L·∫•y cert t·ª´ Supabase theo name
    const { data: cert, error } = await supabase
      .from('certificates')
      .select('*')
      .eq('name', name)
      .single();

    if (error || !cert) {
      console.error("‚ùå Kh√¥ng t√¨m th·∫•y ch·ª©ng ch·ªâ:", error?.message || 'not found');
      return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y ch·ª©ng ch·ªâ.' });
    }

    console.log("‚úÖ [use-certs] Cert found:", cert.name);

    // G·ª≠i GitHub Action
    const trigger = await fetch(`https://api.github.com/repos/chienlove/chienlove.github.io/actions/workflows/sign-ipa.yml/dispatches`, {
      method: 'POST',
      headers: {
        Authorization: `Bearer ${process.env.GH_PAT}`,
        Accept: 'application/vnd.github+json',
      },
      body: JSON.stringify({
        ref: 'main',
        inputs: {
          tag,
          identifier
        }
      })
    });

    if (!trigger.ok) {
      const text = await trigger.text();
      console.error("‚ùå GitHub trigger l·ªói:", text);
      return res.status(500).json({ message: 'GitHub Action l·ªói: ' + text });
    }

    return res.status(200).json({ message: '‚úÖ ƒê√£ g·ª≠i y√™u c·∫ßu k√Ω IPA.' });

  } catch (err) {
    console.error("‚ùå L·ªói server:", err);
    return res.status(500).json({ message: err.message || 'Internal server error' });
  }
}