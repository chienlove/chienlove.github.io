name: Sign all IPAs in release with Zsign

on:
  workflow_dispatch:
    inputs:
      tag:
        description: "Release tag ch·ª©a IPA"
        required: true
      identifier:
        description: "(T√πy ch·ªçn) Bundle Identifier m·ªõi"
        required: false

jobs:
  sign:
    runs-on: macos-latest
    permissions:
      contents: write
      packages: read

    env:
      GH_TOKEN: ${{ github.token }}
      REPO: ${{ github.repository }}
      SUPABASE_URL: https://zkbzykamrzvvrhodiypk.supabase.co
      SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Fetch certificate info from Supabase
        run: |
          response=$(curl -s -w "\nHTTP_STATUS:%{http_code}" \
            -H "apikey: $SUPABASE_SERVICE_ROLE_KEY" \
            -H "Authorization: Bearer $SUPABASE_SERVICE_ROLE_KEY" \
            -H "Accept: application/json" \
            "${SUPABASE_URL}/rest/v1/certificates?select=*")

          http_status=$(echo "$response" | grep HTTP_STATUS: | cut -d':' -f2)
          json_data=$(echo "$response" | sed '/HTTP_STATUS/d')

          if [ "$http_status" -ne 200 ]; then
            echo "::error::Supabase API returned $http_status"
            exit 1
          fi

          echo "$json_data" | jq '.[0]' > cert.json

          echo "CERT_P12_URL=$(jq -r '.p12_url' cert.json)" >> $GITHUB_ENV
          echo "CERT_PROVISION_URL=$(jq -r '.provision_url' cert.json)" >> $GITHUB_ENV
          echo "CERT_PASSWORD=$(jq -r '.password' cert.json)" >> $GITHUB_ENV

      - name: Download certificate & provisioning profile
        run: |
          curl -L "$CERT_P12_URL" -o cert.p12
          curl -L "$CERT_PROVISION_URL" -o profile.mobileprovision

      - name: Set workflow inputs
        run: |
          echo "TAG=${{ github.event.inputs.tag }}" >> $GITHUB_ENV
          echo "IDENTIFIER=${{ github.event.inputs.identifier }}" >> $GITHUB_ENV

      - name: Verify release exists
        run: gh release view "$TAG" --repo "$REPO"

      - name: Download all IPA files from release
        run: |
          gh release download "$TAG" --repo "$REPO" --pattern "*.ipa" --clobber
          COUNT=$(ls *.ipa 2>/dev/null | wc -l)
          if [ "$COUNT" -eq 0 ]; then
            echo "::error::‚ùå No IPA files found in release"
            exit 1
          fi
          echo "üì¶ Found $COUNT IPA files"

      - name: Install Zsign and dependencies
        run: |
          brew install pkg-config openssl minizip
          git clone https://github.com/zhlynn/zsign.git
          cd zsign/build/macos
          make clean && make
          sudo cp ../../bin/zsign /usr/local/bin/

      - name: Extract Team ID and create entitlements
        run: |
          security cms -D -i profile.mobileprovision > provision.plist
          TEAM_ID=$(plutil -extract TeamIdentifier.0 xml1 -o - provision.plist | xmllint --xpath 'string(//string)' -)
          echo "‚úÖ Extracted TEAM_ID: $TEAM_ID"
          echo "TEAM_ID=$TEAM_ID" >> $GITHUB_ENV

          IDENTIFIER=${{ github.event.inputs.identifier }}
          if [ -z "$IDENTIFIER" ]; then
            echo "::error::‚ùå You must provide an identifier"
            exit 1
          fi

          echo "<?xml version=\"1.0\" encoding=\"UTF-8\"?>" > entitlements.xcent
          echo "<!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">" >> entitlements.xcent
          echo "<plist version=\"1.0\">" >> entitlements.xcent
          echo "<dict>" >> entitlements.xcent
          echo "  <key>application-identifier</key>" >> entitlements.xcent
          echo "  <string>$TEAM_ID.$IDENTIFIER</string>" >> entitlements.xcent
          echo "  <key>get-task-allow</key>" >> entitlements.xcent
          echo "  <false/>" >> entitlements.xcent
          echo "</dict>" >> entitlements.xcent
          echo "</plist>" >> entitlements.xcent

      - name: Clean and rewrite all Bundle IDs in Info.plist
        run: |
          mkdir -p cleaned
          for IPA in *.ipa; do
            echo "üì¶ Processing $IPA..."
            mkdir -p tmp && cd tmp
            unzip -q "../$IPA"

            APP_DIR=$(find Payload -type d -name "*.app" | head -n 1)
            if [ -z "$APP_DIR" ]; then
              echo "‚ö†Ô∏è Skipped $IPA: No .app found"
              cd .. && rm -rf tmp
              continue
            fi

            echo "üßπ Removing old code signature..."
            rm -rf "$APP_DIR/_CodeSignature"
            rm -f "$APP_DIR/embedded.mobileprovision"

            echo "üîç Scanning and rewriting Info.plist files..."
            find Payload -name Info.plist | while read plist; do
              OLD_ID=$(/usr/libexec/PlistBuddy -c "Print :CFBundleIdentifier" "$plist" 2>/dev/null || echo "(none)")
              echo "   üßæ $plist ‚ûú $OLD_ID"
              /usr/libexec/PlistBuddy -c "Set :CFBundleIdentifier ${{ github.event.inputs.identifier }}" "$plist" || true
            done

            zip -qr "../cleaned/$IPA" Payload
            cd .. && rm -rf tmp
          done
          mv cleaned/* .

      - name: Sign all IPA files with Zsign
        run: |
          mkdir -p signed
          for IPA in *.ipa; do
            echo "üîß Signing $IPA..."
            zsign -k cert.p12 -p "$CERT_PASSWORD" \
                  -m profile.mobileprovision \
                  -e entitlements.xcent \
                  -o "signed/$IPA" "$IPA"
          done

      - name: Upload signed IPA files to release
        run: |
          for FILE in signed/*.ipa; do
            echo "‚¨ÜÔ∏è Uploading $FILE..."
            gh release upload "$TAG" "$FILE" --repo "$REPO" --clobber
          done
          echo "‚úÖ All signed IPA files uploaded successfully"