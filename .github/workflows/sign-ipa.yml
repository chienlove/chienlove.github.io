name: Sign all IPAs in release with Zsign

on:
  workflow_dispatch:
    inputs:
      tag:
        description: "Release tag ch·ª©a IPA"
        required: true
      identifier:
        description: "(T√πy ch·ªçn) Bundle Identifier m·ªõi"
        required: false

jobs:
  sign:
    runs-on: macos-latest
    permissions:
      contents: write
      packages: read

    env:
      GH_TOKEN: ${{ github.token }}
      REPO: ${{ github.repository }}
      SUPABASE_URL: https://zkbzykamrzvvrhodiypk.supabase.co
      SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Fetch certificate info from Supabase
        run: |
          response=$(curl -s -w "\nHTTP_STATUS:%{http_code}" \
            -H "apikey: $SUPABASE_SERVICE_ROLE_KEY" \
            -H "Authorization: Bearer $SUPABASE_SERVICE_ROLE_KEY" \
            -H "Accept: application/json" \
            "${SUPABASE_URL}/rest/v1/certificates?select=*")
          http_status=$(echo "$response" | grep HTTP_STATUS: | cut -d':' -f2)
          json_data=$(echo "$response" | sed '/HTTP_STATUS/d')
          if [ "$http_status" -ne 200 ]; then
            echo "::error::Supabase API returned $http_status"
            exit 1
          fi
          echo "$json_data" | jq '.[0]' > cert.json
          echo "CERT_P12_URL=$(jq -r '.p12_url' cert.json)" >> $GITHUB_ENV
          echo "CERT_PROVISION_URL=$(jq -r '.provision_url' cert.json)" >> $GITHUB_ENV
          echo "CERT_PASSWORD=$(jq -r '.password' cert.json)" >> $GITHUB_ENV

      - name: Download certificate and provisioning profile
        run: |
          curl -L "$CERT_P12_URL" -o cert.p12
          curl -L "$CERT_PROVISION_URL" -o embedded.mobileprovision

      - name: Extract TEAM_ID from mobileprovision
        run: |
          security cms -D -i embedded.mobileprovision > provision.plist
          TEAM_ID=$(plutil -extract TeamIdentifier.0 xml1 -o - provision.plist | xmllint --xpath 'string(//string)' -)
          echo "TEAM_ID=$TEAM_ID" >> $GITHUB_ENV

      - name: Set workflow inputs
        run: |
          echo "TAG=${{ github.event.inputs.tag }}" >> $GITHUB_ENV
          echo "IDENTIFIER=${{ github.event.inputs.identifier }}" >> $GITHUB_ENV

      - name: Verify release exists
        run: gh release view "$TAG" --repo "$REPO"

      - name: Download all IPA files from release
        run: |
          gh release download "$TAG" --repo "$REPO" --pattern "*.ipa" --clobber
          COUNT=$(ls *.ipa 2>/dev/null | wc -l)
          if [ "$COUNT" -eq 0 ]; then
            echo "::error::‚ùå No IPA files found in release"
            exit 1
          fi

      - name: Install Zsign
        run: |
          brew install pkg-config openssl minizip
          git clone https://github.com/zhlynn/zsign.git
          cd zsign/build/macos && make clean && make
          sudo cp ../../bin/zsign /usr/local/bin/

      - name: Sign all IPA files with Zsign
        run: |
          mkdir -p signed
          for IPA in *.ipa; do
            APP_NAME=$(basename "$IPA" .ipa)
            OUT_NAME="signed/$APP_NAME-signed.ipa"

            if [ -z "$IDENTIFIER" ]; then
              echo "üîß Signing $IPA without changing Bundle ID..."
              zsign -f -k cert.p12 -p "$CERT_PASSWORD" -m embedded.mobileprovision -o "$OUT_NAME" "$IPA"
            else
              echo "üîß Signing $IPA with new Bundle ID: $IDENTIFIER..."
              zsign -f -k cert.p12 -p "$CERT_PASSWORD" -m embedded.mobileprovision \
                -b "$IDENTIFIER" -o "$OUT_NAME" "$IPA"

              echo "üõ†Ô∏è Patching Info.plist to force CFBundleIdentifier = $IDENTIFIER..."
              unzip -q "$OUT_NAME" -d temp
              APP_DIR=$(find temp/Payload -type d -name "*.app" | head -n1)
              /usr/libexec/PlistBuddy -c "Set :CFBundleIdentifier $IDENTIFIER" "$APP_DIR/Info.plist"
              cd temp && zip -qry "../$OUT_NAME" Payload && cd ..
              rm -rf temp

              unzip -q "$OUT_NAME" -d temp
              APP_DIR=$(find temp/Payload -type d -name "*.app" | head -n1)
              PLIST="$APP_DIR/Info.plist"
              BUNDLE_ID=$(/usr/libexec/PlistBuddy -c "Print :CFBundleIdentifier" "$PLIST")
              rm -rf temp

              echo '<?xml version="1.0" encoding="UTF-8"?>' > entitlements.plist
              echo '<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">' >> entitlements.plist
              echo '<plist version="1.0"><dict>' >> entitlements.plist
              echo '  <key>application-identifier</key>' >> entitlements.plist
              echo "  <string>$TEAM_ID.$BUNDLE_ID</string>" >> entitlements.plist
              echo '</dict></plist>' >> entitlements.plist

              zsign -f -k cert.p12 -p "$CERT_PASSWORD" -m embedded.mobileprovision \ 
                -e entitlements.plist -o "$OUT_NAME" "$OUT_NAME"
            fi
          done

      - name: Upload signed IPA files to release
        run: |
          for FILE in signed/*.ipa; do
            gh release upload "$TAG" "$FILE" --repo "$REPO" --clobber
          done

      - name: Generate .plist and upload to release
        run: |
          BASE_URL="https://github.com/$REPO/releases/download/$TAG"
          for FILE in signed/*.ipa; do
            IPA_NAME=$(basename "$FILE")
            APP_NAME=$(basename "$FILE" .ipa)

            unzip -q "$FILE" -d temp
            APP_DIR=$(find temp/Payload -type d -name "*.app" | head -n1)
            PLIST="$APP_DIR/Info.plist"
            BUNDLE_ID=$(/usr/libexec/PlistBuddy -c "Print :CFBundleIdentifier" "$PLIST")
            VERSION=$(/usr/libexec/PlistBuddy -c "Print :CFBundleShortVersionString" "$PLIST" 2>/dev/null || echo "1.0.0")
            DISPLAY_NAME=$(/usr/libexec/PlistBuddy -c "Print :CFBundleDisplayName" "$PLIST" 2>/dev/null || echo "$APP_NAME")
            rm -rf temp

            PLIST_NAME="${APP_NAME}.plist"

            echo '<?xml version="1.0" encoding="UTF-8"?>' > "$PLIST_NAME"
            echo '<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">' >> "$PLIST_NAME"
            echo '<plist version="1.0"><dict>' >> "$PLIST_NAME"
            echo '  <key>items</key>' >> "$PLIST_NAME"
            echo '  <array>' >> "$PLIST_NAME"
            echo '    <dict>' >> "$PLIST_NAME"
            echo '      <key>assets</key>' >> "$PLIST_NAME"
            echo '      <array>' >> "$PLIST_NAME"
            echo '        <dict>' >> "$PLIST_NAME"
            echo '          <key>kind</key>' >> "$PLIST_NAME"
            echo '          <string>software-package</string>' >> "$PLIST_NAME"
            echo '          <key>url</key>' >> "$PLIST_NAME"
            echo "          <string>$BASE_URL/$IPA_NAME</string>" >> "$PLIST_NAME"
            echo '        </dict>' >> "$PLIST_NAME"
            echo '      </array>' >> "$PLIST_NAME"
            echo '      <key>metadata</key>' >> "$PLIST_NAME"
            echo '      <dict>' >> "$PLIST_NAME"
            echo '        <key>bundle-identifier</key>' >> "$PLIST_NAME"
            echo "        <string>$BUNDLE_ID</string>" >> "$PLIST_NAME"
            echo '        <key>bundle-version</key>' >> "$PLIST_NAME"
            echo "        <string>$VERSION</string>" >> "$PLIST_NAME"
            echo '        <key>kind</key>' >> "$PLIST_NAME"
            echo '        <string>software</string>' >> "$PLIST_NAME"
            echo '        <key>title</key>' >> "$PLIST_NAME"
            echo "        <string>$DISPLAY_NAME</string>" >> "$PLIST_NAME"
            echo '      </dict>' >> "$PLIST_NAME"
            echo '    </dict>' >> "$PLIST_NAME"
            echo '  </array>' >> "$PLIST_NAME"
            echo '</dict></plist>' >> "$PLIST_NAME"

            gh release upload "$TAG" "$PLIST_NAME" --repo "$REPO" --clobber
            echo "üîó itms-services://?action=download-manifest&url=$BASE_URL/$PLIST_NAME"
          done