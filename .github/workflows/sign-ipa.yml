name: Sign IPA and Reupload

on:
  workflow_dispatch:
    inputs:
      tag:
        description: "Release tag chứa IPA"
        required: true
      identifier:
        description: "Bundle Identifier mới"
        required: true

jobs:
  sign:
    runs-on: macos-latest
    permissions:
      contents: write
      packages: read

    env:
      GH_TOKEN: ${{ github.token }}
      REPO: ${{ github.repository }}
      SUPABASE_URL: https://zkbzykamrzvvrhodiypk.supabase.co
      SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Install tools
        run: |
          brew install curl jq gh openssl isign
          echo "✅ Tools installed"

      - name: Validate environment variables
        run: |
          if [ -z "$SUPABASE_SERVICE_ROLE_KEY" ] || [ -z "$GH_TOKEN" ]; then
            echo "::error::Missing required secrets"
            exit 1
          fi
          echo "✅ Environment ready"

      - name: Fetch cert info from Supabase
        run: |
          response=$(curl -s -w "\nHTTP_STATUS:%{http_code}" \
            -H "apikey: $SUPABASE_SERVICE_ROLE_KEY" \
            -H "Authorization: Bearer $SUPABASE_SERVICE_ROLE_KEY" \
            -H "Accept: application/json" \
            "${SUPABASE_URL}/rest/v1/certificates?select=*")

          http_status=$(echo "$response" | grep HTTP_STATUS: | cut -d':' -f2)
          json_data=$(echo "$response" | sed '/HTTP_STATUS/d')

          if [ "$http_status" -ne 200 ]; then
            echo "::error::Supabase API error $http_status"
            exit 1
          fi

          echo "$json_data" | jq '.[0]' > cert.json

          export CERT_P12_URL=$(jq -r '.p12_url' cert.json)
          export CERT_PROVISION_URL=$(jq -r '.provision_url' cert.json)
          export CERT_PASSWORD=$(jq -r '.password' cert.json)

          if [ -z "$CERT_P12_URL" ] || [ -z "$CERT_PROVISION_URL" ] || [ -z "$CERT_PASSWORD" ]; then
            echo "::error::Missing cert fields"
            exit 1
          fi

          echo "CERT_P12_URL=$CERT_P12_URL" >> $GITHUB_ENV
          echo "CERT_PROVISION_URL=$CERT_PROVISION_URL" >> $GITHUB_ENV
          echo "CERT_PASSWORD=$CERT_PASSWORD" >> $GITHUB_ENV

      - name: Download certificates
        run: |
          curl -L "$CERT_P12_URL" -o cert.p12
          curl -L "$CERT_PROVISION_URL" -o profile.mobileprovision

      - name: Set variables
        run: |
          echo "TAG=${{ github.event.inputs.tag }}" >> $GITHUB_ENV
          echo "NEW_ID=${{ github.event.inputs.identifier }}" >> $GITHUB_ENV

      - name: Verify release exists
        run: |
          gh release view "$TAG" --repo "$REPO"

      - name: Download IPA from release
        run: |
          gh release download "$TAG" \
            --repo "$REPO" \
            --pattern "*.ipa" \
            --clobber
          IPA_NAME=$(ls *.ipa)
          echo "IPA_NAME=$IPA_NAME" >> $GITHUB_ENV

      - name: Unpack IPA and change Bundle ID
        run: |
          unzip -q "$IPA_NAME" -d unpacked
          APP_PATH=$(find unpacked/Payload -name "*.app" -print -quit)
          if [ -z "$APP_PATH" ]; then
            echo "::error::App not found"
            exit 1
          fi
          /usr/libexec/PlistBuddy -c "Set :CFBundleIdentifier $NEW_ID" "$APP_PATH/Info.plist"

      - name: Convert .p12 to PEM
        run: |
          openssl pkcs12 -in cert.p12 -clcerts -nokeys -out cert.pem -passin pass:"$CERT_PASSWORD"
          openssl pkcs12 -in cert.p12 -nocerts -nodes -out key.pem -passin pass:"$CERT_PASSWORD"

      - name: Sign IPA with isign
        run: |
          IPA_NAME=$(echo "$IPA_NAME")
          isign -c cert.pem -k key.pem -p profile.mobileprovision \
            -i "$NEW_ID" -o signed.ipa "$IPA_NAME"

      - name: Upload signed IPA to release
        run: |
          mv signed.ipa "$IPA_NAME"
          gh release upload "$TAG" "$IPA_NAME" \
            --repo "$REPO" --clobber
          echo "✅ Signed IPA uploaded"