name: Sign all IPAs in release with Zsign

on:
  workflow_dispatch:
    inputs:
      tag:
        description: "Release tag ch·ª©a IPA"
        required: true
      identifier:
        description: "(T√πy ch·ªçn) Bundle Identifier m·ªõi"
        required: false

jobs:
  sign:
    runs-on: macos-latest
    permissions:
      contents: write
      packages: read

    env:
      GH_TOKEN: ${{ github.token }}
      REPO: ${{ github.repository }}
      SUPABASE_URL: https://zkbzykamrzvvrhodiypk.supabase.co
      SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Fetch certificate info from Supabase
        run: |
          response=$(curl -s -w "\nHTTP_STATUS:%{http_code}" \
            -H "apikey: $SUPABASE_SERVICE_ROLE_KEY" \
            -H "Authorization: Bearer $SUPABASE_SERVICE_ROLE_KEY" \
            -H "Accept: application/json" \
            "${SUPABASE_URL}/rest/v1/certificates?select=*")

          http_status=$(echo "$response" | grep HTTP_STATUS: | cut -d':' -f2)
          json_data=$(echo "$response" | sed '/HTTP_STATUS/d')

          if [ "$http_status" -ne 200 ]; then
            echo "::error::Supabase API returned $http_status"
            exit 1
          fi

          echo "$json_data" | jq '.[0]' > cert.json

          echo "CERT_P12_URL=$(jq -r '.p12_url' cert.json)" >> $GITHUB_ENV
          echo "CERT_PROVISION_URL=$(jq -r '.provision_url' cert.json)" >> $GITHUB_ENV
          echo "CERT_PASSWORD=$(jq -r '.password' cert.json)" >> $GITHUB_ENV

      - name: Download certificate and provisioning profile
        run: |
          curl -L "$CERT_P12_URL" -o cert.p12
          curl -L "$CERT_PROVISION_URL" -o embedded.mobileprovision

      - name: Extract TEAM_ID from mobileprovision
        run: |
          security cms -D -i embedded.mobileprovision > provision.plist

          if [ ! -s provision.plist ]; then
            echo "::error::‚ùå Failed to decode embedded.mobileprovision"
            exit 1
          fi

          TEAM_ID=$(plutil -extract TeamIdentifier.0 xml1 -o - provision.plist | xmllint --xpath 'string(//string)' -)

          if [ -z "$TEAM_ID" ]; then
            echo "::error::‚ùå Cannot extract TEAM_ID from provisioning profile"
            exit 1
          fi

          echo "‚úÖ TEAM_ID = $TEAM_ID"
          echo "TEAM_ID=$TEAM_ID" >> $GITHUB_ENV

      - name: Set workflow inputs
        run: |
          echo "TAG=${{ github.event.inputs.tag }}" >> $GITHUB_ENV
          echo "IDENTIFIER=${{ github.event.inputs.identifier }}" >> $GITHUB_ENV

      - name: Verify release exists
        run: gh release view "$TAG" --repo "$REPO"

      - name: Download all IPA files from release
        run: |
          gh release download "$TAG" --repo "$REPO" --pattern "*.ipa" --clobber
          COUNT=$(ls *.ipa 2>/dev/null | wc -l)
          if [ "$COUNT" -eq 0 ]; then
            echo "::error::‚ùå No IPA files found in release"
            exit 1
          fi
          echo "üì¶ Found $COUNT IPA files"

      - name: Install Zsign and dependencies
        run: |
          brew install pkg-config openssl minizip
          git clone https://github.com/zhlynn/zsign.git
          cd zsign/build/macos && make clean && make
          sudo cp ../../bin/zsign /usr/local/bin/

      - name: Sign all IPA files with Zsign (Advanced)
        run: |
          mkdir -p signed
          for IPA in *.ipa; do
            APP_NAME=$(basename "$IPA" .ipa)
            OUT_NAME="signed/$APP_NAME-signed.ipa"

            # Step 1: Extract original entitlements from profile
            security cms -D -i embedded.mobileprovision > provision.plist
            plutil -extract Entitlements xml1 -o entitlements_raw.plist provision.plist

            # Step 2: Handle Bundle ID change if specified
            if [ -n "$IDENTIFIER" ]; then
              echo "üîß Signing $IPA with new Bundle ID: $IDENTIFIER..."
              
              # Create modified entitlements
              plutil -replace 'application-identifier' -string "$TEAM_ID.$IDENTIFIER" entitlements_raw.plist
              plutil -replace 'keychain-access-groups.0' -string "$TEAM_ID.*" entitlements_raw.plist
              cp entitlements_raw.plist entitlements.plist

              # Sign with new Bundle ID
              zsign -f \
                -k cert.p12 -p "$CERT_PASSWORD" \
                -m embedded.mobileprovision \
                -b "$IDENTIFIER" \
                --force-identifier \
                -e entitlements.plist \
                -z 9 \
                -o "$OUT_NAME" "$IPA"
            else
              echo "üîß Signing $IPA without changing Bundle ID..."
              cp entitlements_raw.plist entitlements.plist
              
              # Sign with original Bundle ID
              zsign -f \
                -k cert.p12 -p "$CERT_PASSWORD" \
                -m embedded.mobileprovision \
                -e entitlements.plist \
                -z 9 \
                -o "$OUT_NAME" "$IPA"
            fi
          done

      - name: Verify signed IPAs
        run: |
          for FILE in signed/*.ipa; do
            echo "üîç Verifying $FILE..."
            
            # Check embedded.mobileprovision exists
            unzip -q "$FILE" -d temp_verify
            PROFILE=$(find temp_verify/Payload -name "embedded.mobileprovision" | head -n1)
            if [ -z "$PROFILE" ]; then
              echo "::error::‚ùå Missing embedded.mobileprovision in $FILE"
              exit 1
            fi
            
            # Check code signature
            codesign -dv --verbose=4 "temp_verify/Payload"/*.app 2>&1 | grep -q "valid on disk"
            if [ $? -ne 0 ]; then
              echo "::error::‚ùå Invalid code signature in $FILE"
              exit 1
            fi
            
            echo "‚úÖ $FILE passed verification"
            rm -rf temp_verify
          done

      - name: Upload signed IPA files to release
        run: |
          echo "üì§ Uploading signed IPAs..."
          for FILE in signed/*.ipa; do
            FILENAME=$(basename "$FILE")
            gh release upload "$TAG" "$FILE" --repo "$REPO" --clobber
            echo "‚¨áÔ∏è Download link: https://github.com/$REPO/releases/download/$TAG/$FILENAME"
          done