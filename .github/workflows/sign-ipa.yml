name: Sign all IPAs in release with Zsign

on:
  workflow_dispatch:
    inputs:
      tag:
        description: "Release tag ch·ª©a IPA"
        required: true
      identifier:
        description: "(T√πy ch·ªçn) Bundle Identifier m·ªõi (s·∫Ω random n·∫øu ƒë·ªÉ tr·ªëng)"
        required: false

jobs:
  sign:
    runs-on: macos-latest
    permissions:
      contents: write
      packages: read

    env:
      GH_TOKEN: ${{ github.token }}
      REPO: ${{ github.repository }}
      SUPABASE_URL: https://zkbzykamrzvvrhodiypk.supabase.co
      SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Fetch certificate info from Supabase
        run: |
          response=$(curl -s -w "\nHTTP_STATUS:%{http_code}" \
            -H "apikey: $SUPABASE_SERVICE_ROLE_KEY" \
            -H "Authorization: Bearer $SUPABASE_SERVICE_ROLE_KEY" \
            -H "Accept: application/json" \
            "${SUPABASE_URL}/rest/v1/certificates?select=*")

          http_status=$(echo "$response" | grep HTTP_STATUS: | cut -d':' -f2)
          json_data=$(echo "$response" | sed '/HTTP_STATUS/d')

          if [ "$http_status" -ne 200 ]; then
            echo "::error::Supabase API returned $http_status"
            exit 1
          fi

          echo "$json_data" | jq '.[0]' > cert.json

          echo "CERT_P12_URL=$(jq -r '.p12_url' cert.json)" >> $GITHUB_ENV
          echo "CERT_PASSWORD=$(jq -r '.password' cert.json)" >> $GITHUB_ENV
          echo "TEAM_ID=$(jq -r '.team_id' cert.json)" >> $GITHUB_ENV

      - name: Download certificate
        run: curl -L "$CERT_P12_URL" -o cert.p12

      - name: Set workflow inputs
        run: |
          echo "TAG=${{ github.event.inputs.tag }}" >> $GITHUB_ENV
          if [ -z "${{ github.event.inputs.identifier }}" ]; then
            RAND=$(cat /dev/urandom | tr -dc 'a-z0-9' | fold -w 6 | head -n 1)
            echo "IDENTIFIER=com.chien.app-$RAND" >> $GITHUB_ENV
          else
            echo "IDENTIFIER=${{ github.event.inputs.identifier }}" >> $GITHUB_ENV
          fi

      - name: Verify release exists
        run: gh release view "$TAG" --repo "$REPO"

      - name: Download all IPA files from release
        run: |
          gh release download "$TAG" --repo "$REPO" --pattern "*.ipa" --clobber
          COUNT=$(ls *.ipa 2>/dev/null | wc -l)
          if [ "$COUNT" -eq 0 ]; then
            echo "::error::‚ùå No IPA files found in release"
            exit 1
          fi
          echo "üì¶ Found $COUNT IPA files"

      - name: Install Zsign
        run: |
          brew install pkg-config openssl minizip
          git clone https://github.com/zhlynn/zsign.git
          cd zsign/build/macos
          make clean && make
          sudo cp ../../bin/zsign /usr/local/bin/

      - name: Generate entitlements.plist
        run: |
          cat <<EOF > entitlements.plist
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
  <key>application-identifier</key>
  <string>${TEAM_ID}.${IDENTIFIER}</string>
  <key>com.apple.security.application-groups</key>
  <array>
    <string>${TEAM_ID}.${IDENTIFIER}</string>
  </array>
</dict>
</plist>
EOF

      - name: Sign all IPA files with Zsign (Ad-Hoc, Force)
        run: |
          mkdir -p signed
          for IPA in *.ipa; do
            echo "üîß Signing $IPA with identifier: $IDENTIFIER"
            OUT_NAME="signed/$IPA"
            zsign -f -a \
              -k cert.p12 -p "$CERT_PASSWORD" \
              -b "$IDENTIFIER" \
              -e entitlements.plist \
              -o "$OUT_NAME" "$IPA"
          done

      - name: Verify Bundle ID after signing
        run: |
          for FILE in signed/*.ipa; do
            echo "üîç Verifying $FILE..."
            unzip -q "$FILE" -d tmp_ipa
            echo "‚û°Ô∏è CFBundleIdentifier:"
            plutil -p tmp_ipa/Payload/*.app/Info.plist | grep CFBundleIdentifier || echo "‚ö†Ô∏è Not found"
            rm -rf tmp_ipa
          done

      - name: Upload signed IPA files to release
        run: |
          for FILE in signed/*.ipa; do
            echo "‚¨ÜÔ∏è Uploading $FILE..."
            gh release upload "$TAG" "$FILE" --repo "$REPO" --clobber
          done
          echo "üéâ All signed IPA files uploaded successfully"

      - name: Display download links
        run: |
          echo "üîó Signed IPA download links:"
          for FILE in signed/*.ipa; do
            FILENAME=$(basename "$FILE")
            echo "https://github.com/$REPO/releases/download/$TAG/$FILENAME"
          done