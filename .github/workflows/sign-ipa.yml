name: Sign all IPAs in release with Zsign

on:
  workflow_dispatch:
    inputs:
      tag:
        description: "Release tag ch·ª©a IPA"
        required: true
      identifier:
        description: "(T√πy ch·ªçn) Bundle Identifier m·ªõi"
        required: false

jobs:
  sign:
    runs-on: macos-latest
    permissions:
      contents: write
      packages: read

    env:
      GH_TOKEN: ${{ github.token }}
      REPO: ${{ github.repository }}
      SUPABASE_URL: https://zkbzykamrzvvrhodiypk.supabase.co
      SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Fetch certificate info from Supabase
        run: |
          response=$(curl -s -w "\nHTTP_STATUS:%{http_code}" \
            -H "apikey: $SUPABASE_SERVICE_ROLE_KEY" \
            -H "Authorization: Bearer $SUPABASE_SERVICE_ROLE_KEY" \
            -H "Accept: application/json" \
            "${SUPABASE_URL}/rest/v1/certificates?select=*")

          http_status=$(echo "$response" | grep HTTP_STATUS: | cut -d':' -f2)
          json_data=$(echo "$response" | sed '/HTTP_STATUS/d')

          if [ "$http_status" -ne 200 ]; then
            echo "::error::Supabase API returned $http_status"
            exit 1
          fi

          echo "$json_data" | jq '.[0]' > cert.json

          echo "CERT_P12_URL=$(jq -r '.p12_url' cert.json)" >> $GITHUB_ENV
          echo "CERT_PROVISION_URL=$(jq -r '.provision_url' cert.json)" >> $GITHUB_ENV
          echo "CERT_PASSWORD=$(jq -r '.password' cert.json)" >> $GITHUB_ENV

      - name: Download certificate and provisioning profile
        run: |
          curl -L "$CERT_P12_URL" -o cert.p12
          curl -L "$CERT_PROVISION_URL" -o embedded.mobileprovision

      - name: Extract TEAM_ID from mobileprovision
        run: |
          security cms -D -i embedded.mobileprovision > provision.plist

          if [ ! -s provision.plist ]; then
            echo "::error::‚ùå Failed to decode embedded.mobileprovision"
            exit 1
          fi

          TEAM_ID=$(plutil -extract TeamIdentifier.0 xml1 -o - provision.plist | xmllint --xpath 'string(//string)' -)

          if [ -z "$TEAM_ID" ]; then
            echo "::error::‚ùå Cannot extract TEAM_ID from provisioning profile"
            exit 1
          fi

          echo "‚úÖ TEAM_ID = $TEAM_ID"
          echo "TEAM_ID=$TEAM_ID" >> $GITHUB_ENV

      - name: Set workflow inputs
        run: |
          echo "TAG=${{ github.event.inputs.tag }}" >> $GITHUB_ENV
          echo "IDENTIFIER=${{ github.event.inputs.identifier }}" >> $GITHUB_ENV

      - name: Verify release exists
        run: gh release view "$TAG" --repo "$REPO"

      - name: Download all IPA files from release
        run: |
          gh release download "$TAG" --repo "$REPO" --pattern "*.ipa" --clobber
          COUNT=$(ls *.ipa 2>/dev/null | wc -l)
          if [ "$COUNT" -eq 0 ]; then
            echo "::error::‚ùå No IPA files found in release"
            exit 1
          fi
          echo "üì¶ Found $COUNT IPA files"

      - name: Install Zsign
        run: |
          brew install pkg-config openssl minizip
          git clone https://github.com/zhlynn/zsign.git
          cd zsign/build/macos && make clean && make
          sudo cp ../../bin/zsign /usr/local/bin/

      - name: Sign all IPA files with Zsign (Safe Mode)
        run: |
          mkdir -p signed

          if [ -z "$IDENTIFIER" ]; then
            RANDOM_SUFFIX=$(LC_ALL=C tr -dc 'a-z0-9' < /dev/urandom | head -c 5)
            echo "üîë Shared random suffix: $RANDOM_SUFFIX"
          fi

          for IPA in *.ipa; do
            echo "üì¶ X·ª≠ l√Ω $IPA..."
            unzip -q "$IPA" -d temp
            PLIST_PATH=$(find temp/Payload -name Info.plist | head -n1)

            if [ ! -f "$PLIST_PATH" ]; then
              echo "::error::‚ùå Kh√¥ng t√¨m th·∫•y Info.plist"
              rm -rf temp
              exit 1
            fi

            ORIGINAL_ID=$(/usr/libexec/PlistBuddy -c "Print CFBundleIdentifier" "$PLIST_PATH" 2>/dev/null)
            rm -rf temp

            if [ -z "$ORIGINAL_ID" ]; then
              echo "::error::‚ùå Kh√¥ng l·∫•y ƒë∆∞·ª£c CFBundleIdentifier"
              exit 1
            fi

            if [ -z "$IDENTIFIER" ]; then
              BUNDLE_ID="${ORIGINAL_ID}-storeios.net-${RANDOM_SUFFIX}"
              echo "üîß Auto Bundle ID: $BUNDLE_ID"
            else
              BUNDLE_ID="$IDENTIFIER"
              echo "üîß Bundle ID ng∆∞·ªùi d√πng nh·∫≠p: $BUNDLE_ID"
            fi

            echo '<?xml version="1.0" encoding="UTF-8"?>' > entitlements.plist
            echo '<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">' >> entitlements.plist
            echo '<plist version="1.0"><dict>' >> entitlements.plist
            echo '  <key>application-identifier</key>' >> entitlements.plist
            echo "  <string>$TEAM_ID.$BUNDLE_ID</string>" >> entitlements.plist
            echo '</dict></plist>' >> entitlements.plist

            TEMP_OUT="signed/temp-$IPA"
            echo "üîè K√Ω $IPA v√†o $TEMP_OUT..."

            zsign -f -d \
              -k cert.p12 -p "$CERT_PASSWORD" \
              -m embedded.mobileprovision \
              -b "$BUNDLE_ID" \
              -e entitlements.plist \
              -z 9 \
              -o "$TEMP_OUT" "$IPA" > zsign_log.txt 2>&1

            SIGN_STATUS=$?
            cat zsign_log.txt || true

            if [ "$SIGN_STATUS" -ne 0 ]; then
              echo "::error::‚ùå K√Ω th·∫•t b·∫°i: $IPA"
              exit 1
            fi

            mv "$TEMP_OUT" "$IPA"
            echo "‚úÖ ƒê√£ k√Ω xong: $IPA"
          done

      - name: Verify embedded.mobileprovision exists
        run: |
          for FILE in *.ipa; do
            unzip -q "$FILE" -d temp
            PROFILE=$(find temp/Payload -name "embedded.mobileprovision" | head -n1)
            if [ -z "$PROFILE" ]; then
              echo "::error::‚ùå Thi·∫øu embedded.mobileprovision trong $FILE"
              exit 1
            else
              echo "‚úÖ embedded.mobileprovision OK trong $FILE"
            fi
            rm -rf temp
          done

      - name: Upload signed IPA files to release (overwrite)
        run: |
          echo "üì§ ƒêƒÉng IPA ƒë√£ k√Ω l√™n release:"
          for FILE in *.ipa; do
            gh release upload "$TAG" "$FILE" --repo "$REPO" --clobber
            echo "‚û°Ô∏è https://github.com/$REPO/releases/download/$TAG/$(basename "$FILE")"
          done