name: Sign all IPAs in release with Zsign

on:
  workflow_dispatch:
    inputs:
      tag:
        description: "Release tag ch·ª©a IPA"
        required: true
      identifier:
        description: "(T√πy ch·ªçn) Bundle Identifier m·ªõi"
        required: false

jobs:
  sign:
    runs-on: macos-latest
    permissions:
      contents: write
      packages: read

    env:
      GH_TOKEN: ${{ github.token }}
      REPO: ${{ github.repository }}
      SUPABASE_URL: https://zkbzykamrzvvrhodiypk.supabase.co
      SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Fetch certificate info from Supabase
        run: |
          response=$(curl -s -w "\nHTTP_STATUS:%{http_code}" \
            -H "apikey: $SUPABASE_SERVICE_ROLE_KEY" \
            -H "Authorization: Bearer $SUPABASE_SERVICE_ROLE_KEY" \
            -H "Accept: application/json" \
            "${SUPABASE_URL}/rest/v1/certificates?select=*")

          http_status=$(echo "$response" | grep HTTP_STATUS: | cut -d':' -f2)
          json_data=$(echo "$response" | sed '/HTTP_STATUS/d')

          if [ "$http_status" -ne 200 ]; then
            echo "::error::Supabase API returned $http_status"
            exit 1
          fi

          echo "$json_data" | jq '.[0]' > cert.json

          echo "CERT_P12_URL=$(jq -r '.p12_url' cert.json)" >> $GITHUB_ENV
          echo "CERT_PROVISION_URL=$(jq -r '.provision_url' cert.json)" >> $GITHUB_ENV
          echo "CERT_PASSWORD=$(jq -r '.password' cert.json)" >> $GITHUB_ENV

      - name: Download certificate & provisioning profile
        run: |
          curl -L "$CERT_P12_URL" -o cert.p12
          curl -L "$CERT_PROVISION_URL" -o profile.mobileprovision

      - name: Set workflow inputs
        run: |
          echo "TAG=${{ github.event.inputs.tag }}" >> $GITHUB_ENV
          echo "IDENTIFIER=${{ github.event.inputs.identifier }}" >> $GITHUB_ENV

      - name: Verify release exists
        run: gh release view "$TAG" --repo "$REPO"

      - name: Download all IPA files from release
        run: |
          gh release download "$TAG" --repo "$REPO" --pattern "*.ipa" --clobber
          COUNT=$(ls *.ipa 2>/dev/null | wc -l)
          if [ "$COUNT" -eq 0 ]; then
            echo "::error::‚ùå No IPA files found in release"
            exit 1
          fi
          echo "üì¶ Found $COUNT IPA files"

      - name: Install Zsign
        run: |
          brew install pkg-config openssl minizip
          git clone https://github.com/zhlynn/zsign.git
          cd zsign/build/macos
          make clean && make
          sudo cp ../../bin/zsign /usr/local/bin/

      - name: Extract Team ID and create entitlements
        run: |
          security cms -D -i profile.mobileprovision > provision.plist
          TEAM_ID=$(plutil -extract TeamIdentifier.0 xml1 -o - provision.plist | xmllint --xpath 'string(//string)' -)
          echo "‚úÖ Extracted TEAM_ID: $TEAM_ID"

          cat > entitlements.xcent <<EOF
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN"  "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
  <key>application-identifier</key>
  <string>$TEAM_ID</string>
  <key>get-task-allow</key>
  <false/>
</dict>
</plist>
EOF

      - name: Sign all IPA files with Zsign
        run: |
          mkdir -p signed
          IDENTIFIER="${{ github.event.inputs.identifier }}"

          for IPA in *.ipa; do
            echo "üîß Processing $IPA..."
            OUT_NAME="signed/$IPA"

            if [ -z "$IDENTIFIER" ]; then
              echo "‚ö†Ô∏è No identifier provided. Signing $IPA with original bundle ID."
              zsign -k cert.p12 -p "$CERT_PASSWORD" -m profile.mobileprovision \
                    -e entitlements.xcent -o "$OUT_NAME" "$IPA"
            else
              echo "üÜî Signing $IPA with new bundle ID: $IDENTIFIER"
              zsign -k cert.p12 -p "$CERT_PASSWORD" -m profile.mobileprovision \
                    -e entitlements.xcent -b "$IDENTIFIER" -o "$OUT_NAME" "$IPA"
            fi
          done

      - name: Upload signed IPAs back to release
        run: |
          for FILE in signed/*.ipa; do
            echo "‚¨ÜÔ∏è Uploading $FILE..."
            gh release upload "$TAG" "$FILE" --repo "$REPO" --clobber
          done
          echo "üéâ All signed IPA files uploaded successfully"
