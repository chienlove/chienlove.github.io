name: Sign all IPAs in release with Zsign

on:
  workflow_dispatch:
    inputs:
      tag:
        description: "Release tag chứa IPA"
        required: true
      identifier:
        description: "(Tùy chọn) Bundle Identifier mới"
        required: false

jobs:
  sign:
    runs-on: macos-latest
    permissions:
      contents: write
      packages: read

    env:
      GH_TOKEN: ${{ github.token }}
      REPO: ${{ github.repository }}
      SUPABASE_URL: https://zkbzykamrzvvrhodiypk.supabase.co
      SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Fetch certificate info from Supabase
        run: |
          response=$(curl -s -w "\nHTTP_STATUS:%{http_code}" \
            -H "apikey: $SUPABASE_SERVICE_ROLE_KEY" \
            -H "Authorization: Bearer $SUPABASE_SERVICE_ROLE_KEY" \
            -H "Accept: application/json" \
            "${SUPABASE_URL}/rest/v1/certificates?select=*")
          http_status=$(echo "$response" | grep HTTP_STATUS: | cut -d':' -f2)
          json_data=$(echo "$response" | sed '/HTTP_STATUS/d')
          if [ "$http_status" -ne 200 ]; then
            echo "::error::Supabase API returned $http_status"
            exit 1
          fi
          echo "$json_data" | jq '.[0]' > cert.json
          echo "CERT_P12_URL=$(jq -r '.p12_url' cert.json)" >> $GITHUB_ENV
          echo "CERT_PROVISION_URL=$(jq -r '.provision_url' cert.json)" >> $GITHUB_ENV
          echo "CERT_PASSWORD=$(jq -r '.password' cert.json)" >> $GITHUB_ENV

      - name: Download certificate and provisioning profile
        run: |
          curl -L "$CERT_P12_URL" -o cert.p12
          curl -L "$CERT_PROVISION_URL" -o embedded.mobileprovision

      - name: Extract TEAM_ID from mobileprovision
        run: |
          security cms -D -i embedded.mobileprovision > provision.plist
          TEAM_ID=$(plutil -extract TeamIdentifier.0 xml1 -o - provision.plist | xmllint --xpath 'string(//string)' -)
          echo "TEAM_ID=$TEAM_ID" >> $GITHUB_ENV

      - name: Set workflow inputs
        run: |
          echo "TAG=${{ github.event.inputs.tag }}" >> $GITHUB_ENV
          echo "INPUT_IDENTIFIER=${{ github.event.inputs.identifier }}" >> $GITHUB_ENV

      - name: Generate shared random (if needed)
        if: ${{ github.event.inputs.identifier == '' }}
        run: |
          RAND=$(openssl rand -hex 3)
          echo "RAND=$RAND" >> $GITHUB_ENV

      - name: Verify release exists
        run: gh release view "$TAG" --repo "$REPO"

      - name: Download all IPA files from release
        run: |
          gh release download "$TAG" --repo "$REPO" --pattern "*.ipa" --clobber
          COUNT=$(ls *.ipa 2>/dev/null | wc -l)
          if [ "$COUNT" -eq 0 ]; then
            echo "::error::❌ No IPA files found in release"
            exit 1
          fi

      - name: Install Zsign and dependencies
        run: |
          brew install pkg-config openssl minizip imagemagick
          git clone https://github.com/zhlynn/zsign.git
          cd zsign/build/macos && make clean && make
          sudo cp ../../bin/zsign /usr/local/bin/

      - name: Patch Info.plist & Binary
        run: |
          > id_map.txt
          mkdir -p public/icons public/plist
          for IPA in *.ipa; do
            echo "📦 Patching $IPA..."
            APP_NAME=$(basename "$IPA" .ipa)
            WORKDIR="/tmp/zsign_patch_$RANDOM"
            unzip -q "$IPA" -d "$WORKDIR"

            APP_DIR=$(find "$WORKDIR/Payload" -name "*.app" -type d | head -n1)
            MAIN_PLIST="$APP_DIR/Info.plist"
            BINARY_NAME=$(/usr/libexec/PlistBuddy -c "Print :CFBundleExecutable" "$MAIN_PLIST")
            BINARY_PATH="$APP_DIR/$BINARY_NAME"

            OLD_ID=$(/usr/libexec/PlistBuddy -c "Print :CFBundleIdentifier" "$MAIN_PLIST")
            BASE_ID=$(echo "$OLD_ID" | sed -E 's/-storeios\.net(-[a-f0-9]+)?$//')

            if [ -z "$INPUT_IDENTIFIER" ]; then
              FINAL_ID="${BASE_ID}-storeios.net-${RAND}"
            else
              FINAL_ID="$INPUT_IDENTIFIER"
            fi

            /usr/libexec/PlistBuddy -c "Set :CFBundleIdentifier $FINAL_ID" "$MAIN_PLIST"
            /usr/bin/perl -pi -e "s/\Q$OLD_ID\E/$FINAL_ID/" "$BINARY_PATH"

            echo "$IPA|$FINAL_ID" >> id_map.txt

            ICON_FILE=$(defaults read "$MAIN_PLIST" CFBundleIcons.CFBundlePrimaryIcon.CFBundleIconFiles | sed -n 2p | tr -d '", ')
            ICON_PATH="$APP_DIR/$ICON_FILE.png"
            if [ -f "$ICON_PATH" ]; then
              cp "$ICON_PATH" "public/icons/${APP_NAME}.png"
            fi

            OUTPUT_PATH="$RUNNER_TEMP/$APP_NAME-patched.ipa"
            cd "$WORKDIR"
            zip -qr9 "$OUTPUT_PATH" Payload
            cd -
            mv "$OUTPUT_PATH" "$IPA"
            rm -rf "$WORKDIR"
          done

      - name: Sign IPA files
        run: |
          while IFS='|' read -r IPA FINAL_ID; do
            APP_NAME=$(basename "$IPA" .ipa)
            TMP_OUT="$RUNNER_TEMP/$APP_NAME-signed.ipa"
            zsign -f -z 9 -k cert.p12 -p "$CERT_PASSWORD" -m embedded.mobileprovision \
              -b "$FINAL_ID" -o "$TMP_OUT" "$IPA"
            mv "$TMP_OUT" "$IPA"
          done < id_map.txt

      - name: Upload signed IPA and generate .plist
        run: |
          BASE_URL="https://github.com/$REPO/releases/download/$TAG"
          for IPA in *.ipa; do
            gh release upload "$TAG" "$IPA" --repo "$REPO" --clobber
          done

          while IFS='|' read -r IPA FINAL_ID; do
            APP_NAME="${IPA%.ipa}"
            PLIST_NAME="${APP_NAME}.plist"
            ICON_NAME="${APP_NAME}.png"

            VERSION="1.0.0"
            echo "<?xml version=\"1.0\" encoding=\"UTF-8\"?>" > "public/plist/$PLIST_NAME"
            echo "<!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">" >> "public/plist/$PLIST_NAME"
            echo "<plist version=\"1.0\"><dict>" >> "public/plist/$PLIST_NAME"
            echo "  <key>items</key><array><dict>" >> "public/plist/$PLIST_NAME"
            echo "    <key>assets</key><array>" >> "public/plist/$PLIST_NAME"
            echo "      <dict><key>kind</key><string>software-package</string><key>url</key><string>$BASE_URL/$IPA</string></dict>" >> "public/plist/$PLIST_NAME"
            if [ -f "public/icons/$ICON_NAME" ]; then
              echo "      <dict><key>kind</key><string>display-image</string><key>needs-shine</key><false/><key>url</key><string>https://${REPO#*/}.github.io/icons/$ICON_NAME</string></dict>" >> "public/plist/$PLIST_NAME"
            fi
            echo "    </array>" >> "public/plist/$PLIST_NAME"
            echo "    <key>metadata</key><dict>" >> "public/plist/$PLIST_NAME"
            echo "      <key>bundle-identifier</key><string>$FINAL_ID</string>" >> "public/plist/$PLIST_NAME"
            echo "      <key>bundle-version</key><string>$VERSION</string>" >> "public/plist/$PLIST_NAME"
            echo "      <key>kind</key><string>software</string>" >> "public/plist/$PLIST_NAME"
            echo "      <key>title</key><string>$APP_NAME</string>" >> "public/plist/$PLIST_NAME"
            echo "    </dict>" >> "public/plist/$PLIST_NAME"
            echo "  </dict></array></dict></plist>" >> "public/plist/$PLIST_NAME"
          done < id_map.txt

      - name: Commit plist & icons
        run: |
          git config user.name "github-actions"
          git config user.email "actions@github.com"
          git add public/plist/*.plist public/icons/*.png || true
          git commit -m "📦 Add plist & icons for tag $TAG" || echo "No changes"
          git push