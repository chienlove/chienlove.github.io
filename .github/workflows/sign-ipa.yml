name: Sign all IPAs in release with Zsign

on:
  workflow_dispatch:
    inputs:
      tag:
        description: "Release tag ch·ª©a IPA"
        required: true
      identifier:
        description: "(T√πy ch·ªçn) Bundle Identifier m·ªõi"
        required: false

jobs:
  sign:
    runs-on: macos-latest
    permissions:
      contents: write
      packages: read

    env:
      GH_TOKEN: ${{ github.token }}
      REPO: ${{ github.repository }}
      SUPABASE_URL: https://zkbzykamrzvvrhodiypk.supabase.co
      SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Fetch certificate info from Supabase
        run: |
          response=$(curl -s -w "\nHTTP_STATUS:%{http_code}" \
            -H "apikey: $SUPABASE_SERVICE_ROLE_KEY" \
            -H "Authorization: Bearer $SUPABASE_SERVICE_ROLE_KEY" \
            -H "Accept: application/json" \
            "${SUPABASE_URL}/rest/v1/certificates?select=*")
          http_status=$(echo "$response" | grep HTTP_STATUS: | cut -d':' -f2)
          json_data=$(echo "$response" | sed '/HTTP_STATUS/d')
          if [ "$http_status" -ne 200 ]; then
            echo "::error::Supabase API returned $http_status"
            exit 1
          fi
          echo "$json_data" | jq '.[0]' > cert.json
          echo "CERT_P12_URL=$(jq -r '.p12_url' cert.json)" >> $GITHUB_ENV
          echo "CERT_PROVISION_URL=$(jq -r '.provision_url' cert.json)" >> $GITHUB_ENV
          echo "CERT_PASSWORD=$(jq -r '.password' cert.json)" >> $GITHUB_ENV

      - name: Download certificate and provisioning profile
        run: |
          curl -L "$CERT_P12_URL" -o cert.p12
          curl -L "$CERT_PROVISION_URL" -o embedded.mobileprovision

      - name: Extract TEAM_ID from mobileprovision
        run: |
          security cms -D -i embedded.mobileprovision > provision.plist
          TEAM_ID=$(plutil -extract TeamIdentifier.0 xml1 -o - provision.plist | xmllint --xpath 'string(//string)' -)
          echo "TEAM_ID=$TEAM_ID" >> $GITHUB_ENV

      - name: Set workflow inputs & generate random suffix
        run: |
          echo "TAG=${{ github.event.inputs.tag }}" >> $GITHUB_ENV
          echo "IDENTIFIER=${{ github.event.inputs.identifier }}" >> $GITHUB_ENV

          if [ -z "${{ github.event.inputs.identifier }}" ]; then
            RANDOM_SUFFIX=$(cat /dev/urandom | tr -dc 'a-z0-9' | fold -w 5 | head -n 1)
            echo "üîë Shared random suffix: $RANDOM_SUFFIX"
            echo "RANDOM_SUFFIX=$RANDOM_SUFFIX" >> $GITHUB_ENV
          fi

      - name: Verify release exists
        run: gh release view "$TAG" --repo "$REPO"

      - name: Download all IPA files from release
        run: |
          gh release download "$TAG" --repo "$REPO" --pattern "*.ipa" --clobber
          COUNT=$(ls *.ipa 2>/dev/null | wc -l)
          if [ "$COUNT" -eq 0 ]; then
            echo "::error::‚ùå No IPA files found in release"
            exit 1
          fi

      - name: Install Zsign
        run: |
          brew install pkg-config openssl minizip
          git clone https://github.com/zhlynn/zsign.git
          cd zsign/build/macos && make clean && make
          sudo cp ../../bin/zsign /usr/local/bin/

      - name: Patch IPA if identifier is not provided
        if: ${{ github.event.inputs.identifier == '' }}
        run: |
          mkdir -p signed
          for IPA in *.ipa; do
            echo "üì¶ Processing $IPA..."
            unzip -q "$IPA" -d extracted

            MAIN_PLIST=$(find extracted/Payload -name Info.plist | head -n 1)
            ORIGINAL_ID=$(/usr/libexec/PlistBuddy -c "Print :CFBundleIdentifier" "$MAIN_PLIST" 2>/dev/null || echo "")
            BINARY_NAME=$(/usr/libexec/PlistBuddy -c "Print :CFBundleExecutable" "$MAIN_PLIST" 2>/dev/null || echo "")

            if [ -z "$ORIGINAL_ID" ] || [ -z "$BINARY_NAME" ]; then
              echo "::error::‚ùå Could not extract identifier or binary name"
              exit 1
            fi

            CLEAN_ID=$(echo "$ORIGINAL_ID" | sed 's/-storeios\.net-[a-z0-9]*$//')
            NEW_ID="${CLEAN_ID}-storeios.net-${RANDOM_SUFFIX}"
            echo "üîß Using identifier: $NEW_ID"

            BINARY_PATH=$(find extracted/Payload -name "$BINARY_NAME" | head -n1)

            /usr/libexec/PlistBuddy -c "Set :CFBundleIdentifier $NEW_ID" "$MAIN_PLIST"
            /usr/bin/perl -pi -e "s/\Q$ORIGINAL_ID\E/$NEW_ID/" "$BINARY_PATH"

            cd extracted && zip -qr "../$IPA" Payload && cd -
            rm -rf extracted

            zsign -f -k cert.p12 -p "$CERT_PASSWORD" -m embedded.mobileprovision \
              -b "$NEW_ID" -o "signed/$(basename "$IPA" .ipa)-signed.ipa" "$IPA"
          done

      - name: Sign IPA with provided identifier
        if: ${{ github.event.inputs.identifier != '' }}
        run: |
          mkdir -p signed
          for IPA in *.ipa; do
            APP_NAME=$(basename "$IPA" .ipa)
            OUT_NAME="signed/$APP_NAME-signed.ipa"

            echo "üîß Signing $IPA with provided Bundle ID: $IDENTIFIER"
            zsign -f -k cert.p12 -p "$CERT_PASSWORD" -m embedded.mobileprovision \
              -b "$IDENTIFIER" -o "$OUT_NAME" "$IPA"
          done

      - name: Upload signed IPA and plist
        run: |
          BASE_URL="https://github.com/$REPO/releases/download/$TAG"
          for FILE in signed/*.ipa; do
            FILENAME=$(basename "$FILE")
            APP_NAME="${FILENAME%.ipa}"
            PLIST_NAME="${APP_NAME}.plist"

            gh release upload "$TAG" "$FILE" --repo "$REPO" --clobber

            echo "<?xml version=\"1.0\" encoding=\"UTF-8\"?>" > "$PLIST_NAME"
            echo "<!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">" >> "$PLIST_NAME"
            echo "<plist version=\"1.0\"><dict>" >> "$PLIST_NAME"
            echo "  <key>items</key><array><dict>" >> "$PLIST_NAME"
            echo "    <key>assets</key><array><dict>" >> "$PLIST_NAME"
            echo "      <key>kind</key><string>software-package</string>" >> "$PLIST_NAME"
            echo "      <key>url</key><string>$BASE_URL/$FILENAME</string>" >> "$PLIST_NAME"
            echo "    </dict></array>" >> "$PLIST_NAME"
            echo "    <key>metadata</key><dict>" >> "$PLIST_NAME"
            echo "      <key>bundle-identifier</key><string>${NEW_ID:-$IDENTIFIER}</string>" >> "$PLIST_NAME"
            echo "      <key>bundle-version</key><string>1.0.0</string>" >> "$PLIST_NAME"
            echo "      <key>kind</key><string>software</string>" >> "$PLIST_NAME"
            echo "      <key>title</key><string>$APP_NAME</string>" >> "$PLIST_NAME"
            echo "    </dict>" >> "$PLIST_NAME"
            echo "  </dict></array></dict></plist>" >> "$PLIST_NAME"

            gh release upload "$TAG" "$PLIST_NAME" --repo "$REPO" --clobber
            echo "üì≤ Link c√†i ƒë·∫∑t:"
            echo "itms-services://?action=download-manifest&url=$BASE_URL/$PLIST_NAME"
          done