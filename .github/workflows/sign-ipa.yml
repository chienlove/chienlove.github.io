name: Sign IPA with Zsign

on:
  workflow_dispatch:
    inputs:
      tag:
        description: "Release tag ch·ª©a IPA"
        required: true
      identifier:
        description: "(T√πy ch·ªçn) Bundle Identifier m·ªõi"
        required: false

jobs:
  sign:
    runs-on: macos-latest
    permissions:
      contents: write
      packages: read

    env:
      GH_TOKEN: ${{ github.token }}
      REPO: ${{ github.repository }}
      SUPABASE_URL: https://zkbzykamrzvvrhodiypk.supabase.co
      SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Fetch certificate info from Supabase
        run: |
          response=$(curl -s -w "\nHTTP_STATUS:%{http_code}" \
            -H "apikey: $SUPABASE_SERVICE_ROLE_KEY" \
            -H "Authorization: Bearer $SUPABASE_SERVICE_ROLE_KEY" \
            -H "Accept: application/json" \
            "${SUPABASE_URL}/rest/v1/certificates?select=*")

          http_status=$(echo "$response" | grep HTTP_STATUS: | cut -d':' -f2)
          json_data=$(echo "$response" | sed '/HTTP_STATUS/d')

          if [ "$http_status" -ne 200 ]; then
            echo "::error::Supabase API returned $http_status"
            exit 1
          fi

          echo "$json_data" | jq '.[0]' > cert.json

          export CERT_P12_URL=$(jq -r '.p12_url' cert.json)
          export CERT_PROVISION_URL=$(jq -r '.provision_url' cert.json)
          export CERT_PASSWORD=$(jq -r '.password' cert.json)

          echo "CERT_P12_URL=$CERT_P12_URL" >> $GITHUB_ENV
          echo "CERT_PROVISION_URL=$CERT_PROVISION_URL" >> $GITHUB_ENV
          echo "CERT_PASSWORD=$CERT_PASSWORD" >> $GITHUB_ENV

      - name: Download certificate & provisioning
        run: |
          curl -L "$CERT_P12_URL" -o cert.p12
          curl -L "$CERT_PROVISION_URL" -o profile.mobileprovision

      - name: Set environment variables
        run: |
          echo "TAG=${{ github.event.inputs.tag }}" >> $GITHUB_ENV
          echo "IDENTIFIER=${{ github.event.inputs.identifier }}" >> $GITHUB_ENV

      - name: Verify release exists
        run: gh release view "$TAG" --repo "$REPO"

      - name: Download IPA from release
        run: |
          gh release download "$TAG" --repo "$REPO" --pattern "*.ipa" --clobber
          IPA_NAME=$(ls *.ipa)
          echo "IPA_NAME=$IPA_NAME" >> $GITHUB_ENV

      - name: Install Zsign
        run: |
          brew install pkg-config openssl minizip
          git clone https://github.com/zhlynn/zsign.git
          cd zsign/build/macos
          make clean && make
          sudo cp zsign /usr/local/bin/

      - name: Sign IPA with zsign
        run: |
          IPA_NAME=$(ls *.ipa)
          OUT_NAME="signed.ipa"
          IDENTIFIER="${{ github.event.inputs.identifier }}"

          if [ -z "$IDENTIFIER" ]; then
            echo "‚ö†Ô∏è No identifier provided. Signing with original bundle ID."
            zsign -k cert.p12 -p "$CERT_PASSWORD" -m profile.mobileprovision -o "$OUT_NAME" "$IPA_NAME"
          else
            echo "üÜî Signing with new bundle ID: $IDENTIFIER"
            zsign -k cert.p12 -p "$CERT_PASSWORD" -m profile.mobileprovision -o "$OUT_NAME" -b "$IDENTIFIER" "$IPA_NAME"
          fi

      - name: Upload signed IPA back to release
        run: |
          gh release upload "$TAG" signed.ipa --repo "$REPO" --clobber
          echo "üéâ Signed IPA uploaded successfully"