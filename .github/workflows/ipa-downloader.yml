name: Deploy IPA Downloader

on:
  push:
    branches: [ main ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: true

    - name: Setup Hugo
      uses: peaceiris/actions-hugo@v2
      with:
        hugo-version: '0.88.1'

    - name: Create IPA Downloader page
      run: |
        mkdir -p content/ipa-downloader
        echo '---
        title: "IPA Downloader"
        ---

        {{< form-download >}}' > content/ipa-downloader/_index.md

    - name: Create form-download shortcode
      run: |
        mkdir -p layouts/shortcodes
        echo '<form id="download-form">
          <input type="text" id="appid" name="appid" placeholder="APPID hoặc URL Appstore" required>
          <input type="text" id="appVerId" name="appVerId" placeholder="ID phiên bản (không bắt buộc)">
          <input type="email" id="apple-id" name="apple-id" placeholder="Apple ID" required>
          <input type="password" id="password" name="password" placeholder="Mật khẩu" required>
          <input type="text" id="code" name="code" placeholder="Mã xác minh 2 bước (nếu có)">
          <button type="submit">Tải xuống IPA</button>
        </form>
        <div id="result"></div>

        <script>
        document.getElementById("download-form").addEventListener("submit", async (e) => {
          e.preventDefault();
          const formData = new FormData(e.target);
          const data = Object.fromEntries(formData);
          
          try {
            const response = await fetch("https://${{ secrets.WORKER_URL }}", {
              method: "POST",
              body: JSON.stringify(data),
              headers: { "Content-Type": "application/json" }
            });
            
            const result = await response.json();
            document.getElementById("result").innerHTML = `<a href="${result.url}">Tải xuống IPA</a>`;
          } catch (error) {
            document.getElementById("result").innerHTML = `Lỗi: ${error.message}`;
          }
        });
        </script>' > layouts/shortcodes/form-download.html

    - name: Build Hugo site
      run: hugo --minify

    - name: Deploy to Netlify
      uses: nwtgck/actions-netlify@v1.2
      with:
        publish-dir: './public'
        production-branch: main
        github-token: ${{ secrets.GITHUB_TOKEN }}
        deploy-message: "Deploy from GitHub Actions"
      env:
        NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
        NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}

    - name: Setup Node.js
      uses: actions/setup-node@v2
      with:
        node-version: '14'

    - name: Install Wrangler
      run: npm install -g wrangler

    - name: Configure Wrangler
      run: |
        mkdir ipa-downloader
        cd ipa-downloader
        echo 'name = "ipa-downloader"
        type = "javascript"
        account_id = "${{ secrets.CF_ACCOUNT_ID }}"
        workers_dev = true

        [[r2_buckets]]
        binding = "MY_BUCKET"
        bucket_name = "ipa-downloads"' > wrangler.toml

    - name: Create Worker script
      run: |
        cd ipa-downloader
        mkdir src
        echo 'import { Store } from "./client";
        import { SignatureClient } from "./Signature";

        export default {
          async fetch(request, env, ctx) {
            if (request.method !== "POST") {
              return new Response("Method Not Allowed", { status: 405 });
            }

            const { APPLE_ID, PASSWORD, CODE, APPID, appVerId } = await request.json();

            try {
              const user = await Store.authenticate(APPLE_ID, PASSWORD, CODE);
              if (user._state !== "success") {
                throw new Error(user.customerMessage);
              }

              const app = await Store.download(APPID, appVerId, user);
              if (app._state !== "success") {
                throw new Error(app.customerMessage);
              }

              const songList0 = app?.songList[0];
              const uniqueString = crypto.randomUUID();
              const fileName = `${songList0.metadata.bundleDisplayName}_${songList0.metadata.bundleShortVersionString}_${uniqueString}.ipa`;

              // Download IPA file
              const response = await fetch(songList0.URL);
              const arrayBuffer = await response.arrayBuffer();

              // Sign IPA
              const sigClient = new SignatureClient(songList0, APPLE_ID);
              await sigClient.loadBuffer(arrayBuffer);
              await sigClient.appendMetadata().appendSignature();
              const signedBuffer = await sigClient.getBuffer();

              // Upload to Cloudflare R2
              await env.MY_BUCKET.put(fileName, signedBuffer);

              // Generate temporary URL for download
              const url = await env.MY_BUCKET.createSignedUrl(fileName, {
                expiresIn: 60 * 15, // 15 minutes
              });

              return new Response(JSON.stringify({ url }), {
                headers: { "Content-Type": "application/json" },
              });
            } catch (error) {
              return new Response(JSON.stringify({ error: error.message }), {
                status: 500,
                headers: { "Content-Type": "application/json" },
              });
            }
          },
        };' > src/index.js

    - name: Deploy Worker
      run: |
        cd ipa-downloader
        wrangler publish
      env:
        CF_API_TOKEN: ${{ secrets.CF_API_TOKEN }}
